"""
If a DSL uses third-party libraries, we will generate a mock jar package for it.
Notably, properties like function and field should also be mocked.
"""

import subprocess, os
from pathlib import Path

from src.utils._logger import logger
from src.utils.config import KIRIN_JAVA_HOME
from src.utils._helper import create_dir_with_path
from src.mock.mock_lib_llm import gen_mock_lib_code_llm
from src.mock.mock_lib_ts import gen_mock_lib_code_ts


def install_lib_code(mock_lib_code_res: dict[str, str], install_dir: Path) -> bool:
    """
    Install the mock lib code to the kirin workspace.
    :param mock_lib_code_res: The result of the mock lib code generation. ["{class_fqn}": "{mock_code}"}]
    :param install_dir: The directory to install the mock lib code.
    :return: True if the installation is successful, False otherwise.
    """
    # check the mock lib code result
    if len(mock_lib_code_res) == 0:
        logger.warning(f"--> No mock lib code is generated!")
        return False

    # install the mock lib code to the install_dir
    for class_fqn, lib_code in mock_lib_code_res.items():
        class_rel_path = f"{class_fqn.replace(".", "/")}.java"
        lib_file_path = install_dir / class_rel_path
        # create directory structure
        lib_file_path.parent.mkdir(parents=True, exist_ok=True)
        # write the java file
        lib_file_path.write_text(lib_code, encoding="utf-8")
        logger.info(f"Installed mock lib code for {class_fqn} in {lib_file_path}.")
    return True


def gen_mock_jar(dsl_id: str, use_llm: bool = False) -> bool:
    """
    generate a mock jar package for the dsl_id (empty implementation with only signatures)
    dsl_id / test must be provided. save jar path: kirin_ws/{dsl_id}/lib/mock.jar
    """
    logger.info(f"==> Generating mock lib jar for {dsl_id}")
    dsl_ws_dir = Path(f"kirin_ws/{dsl_id}")
    if not dsl_ws_dir.is_dir():
        logger.error(f"DSL workspace directory {dsl_ws_dir} does not exist!")
        return False

    # generate mock lib code
    test_dir = dsl_ws_dir / "test"
    lib_code_res = gen_mock_lib_code_ts(test_dir)
    if not lib_code_res:
        logger.info(f"No mock lib code is generated for {dsl_id}")
        return False

    logger.info(f"==> Generating mock lib code for {dsl_id}...")

    if use_llm:
        lib_code_res = gen_mock_lib_code_llm(test_dir)
        assert lib_code_res, f"No mock lib code is generated by LLM, but tree-sitter succeeds!"

    # mock jar -> only create the mock lib folder if needed
    lib_dir = dsl_ws_dir / "lib"
    lib_dir.mkdir(parents=True, exist_ok=True)
    output_jar_path = lib_dir / "mock.jar"

    # mock pkg source code -- create _mock_tmp folder
    tmp_mock_dir = dsl_ws_dir / "_mock_tmp"
    create_dir_with_path(tmp_mock_dir, cleanup=True)

    # install the mock lib code to the tmp dir
    install_lib_code(lib_code_res, tmp_mock_dir)

    try:
        javac_executable = os.path.join(KIRIN_JAVA_HOME, "bin", "javac")
        jar_executable = os.path.join(KIRIN_JAVA_HOME, "bin", "jar")
        if os.name == "nt":
            javac_executable += ".exe"
            jar_executable += ".exe"
        # compile
        java_files = [
            str(tmp_mock_dir / f"{cls_full_name.replace('.', '/')}.java") for cls_full_name in lib_code_res.keys()
        ]
        javac_res = subprocess.run(
            [javac_executable, "-encoding", "utf-8", "-d", str(tmp_mock_dir)] + java_files,
            capture_output=True,
            text=True,
            check=True,
        )
        logger.debug(f"Javac result: \n{javac_res.stdout}")

        # package
        jar_res = subprocess.run(
            [jar_executable, "cvf", str(output_jar_path), "-C", str(tmp_mock_dir), "."],
            capture_output=True,
            text=True,
            check=True,
        )
        logger.debug(f"Jar result: \n{jar_res.stdout}")

        logger.info(f"Generated mock JAR at {output_jar_path}")
    except subprocess.CalledProcessError as e:
        logger.error(f"--> Failed to generate mock JAR for {dsl_id}: {e}")
        return False


if __name__ == "__main__":
    # Test the gen_mock_jar function
    dsl_id = "test_tmp"
    gen_mock_jar(dsl_id, use_llm=True)
