import os
import xml.etree.ElementTree as ET
from pathlib import Path

from src.utils._kirin import KirinRunner
from src.utils._logger import logger
from src.utils.types import DslValResDict


def validate_tests(dsl_id) -> DslValResDict:
    """
    validate dsl in its corresponding kirin_ws: kirin_ws/{dsl_id}
    Note: all the dsls should have been prepared in the kirin_ws
    """
    logger.info(f"==> Validating DSL: {dsl_id}")
    dsl_ws_dir = Path(f"kirin_ws/{dsl_id}")
    if not dsl_ws_dir.is_dir():
        logger.error(f"DSL workspace directory {dsl_ws_dir} does not exist!")
        return False

    dsl_dir = dsl_ws_dir / "dsl"
    test_dir = dsl_ws_dir / "test"
    lib_dir = dsl_ws_dir / "lib"
    report_dir = dsl_ws_dir / "report"

    # execute kirin dsl (report dir will be automatically created in the test dir)
    if lib_dir.exists():
        KirinRunner.execute_kirin_dsl(dsl_dir, test_dir, report_dir, lib_dir)
    else:
        KirinRunner.execute_kirin_dsl(dsl_dir, test_dir, report_dir)

    return parse_xml_results(dsl_id)


def parse_xml_results(dsl_id) -> dict[str, DslValResDict]:
    """
    Parse the XML results generated by the DSL validation process.
    """
    report_dir = Path(f"kirin_ws/{dsl_id}/report")
    if not report_dir.is_dir():
        logger.error(f"Report directory {report_dir} does not exist!")
        return False

    assert len(list(report_dir.glob("*.xml"))) == 1, f"More than one XML file found in {report_dir}"
    xml_res_file = report_dir / "error_report_1.xml"
    tree = ET.parse(xml_res_file)
    root = tree.getroot()

    # get all the scanned files
    scan_files = set()
    for scan_file in root.findall(".//scanFiles/scanFile"):
        file_name = os.path.basename(scan_file.text)
        scan_files.add(file_name)

    result = {}
    for error in root.findall(".//errors/error"):
        defect_info = error.find("defectInfo")
        checker_name = defect_info.find("checkerName").text
        file_path = defect_info.find("fileName").text
        file_name = os.path.basename(file_path)
        report_line = int(defect_info.find("reportLine").text)

        # new checker name
        if checker_name not in result:
            result[checker_name] = {"report": dict(), "pass": []}

        # add info: {file_name: [report_line, ...]}
        if file_name not in result[checker_name]["report"]:
            result[checker_name]["report"][file_name] = []
        else:
            result[checker_name]["report"][file_name].append(report_line)

    # get passed files
    for checker_name in result:
        reported_files = list(result[checker_name]["report"].keys())
        pass_files = [f for f in scan_files if f not in reported_files]
        result[checker_name]["pass"] = pass_files

    # checkers not reported in the XML file
    checker_dir = Path(f"kirin_ws/{dsl_id}/dsl")
    # collect all .kirin file in checker_dir and its sub_dir recursively into the checker_list

    checker_list = list(checker_dir.glob("**/*.kirin"))
    for checker_file in checker_list:
        checker_name = checker_file.stem
        if checker_name not in result:
            result[checker_name] = {"report": dict(), "pass": scan_files}

    # log output
    sorted_keys = sorted(list(result.keys()), key=lambda x: (len(x), x))
    res_str = ""
    for checker_name in sorted_keys:
        res_str += f"=> Checker: {checker_name}\n"
        res_str += f"\treprted: {', '.join(result[checker_name]['report'].keys())}\n"
        res_str += f"\tpassed: {', '.join(result[checker_name]['pass'])}\n\n"
    logger.info(f"==> Validation Result:\n{res_str}")

    return result


if __name__ == "__main__":
    # Example usage
    dsl_id = "example_dsl_id"
    validate_tests(dsl_id)
