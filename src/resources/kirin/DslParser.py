# Generated from DslParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,1910,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,1,0,5,0,344,8,0,10,0,12,0,347,9,0,1,0,3,0,350,8,0,1,
        0,5,0,353,8,0,10,0,12,0,356,9,0,1,0,3,0,359,8,0,1,0,5,0,362,8,0,
        10,0,12,0,365,9,0,3,0,367,8,0,1,1,5,1,370,8,1,10,1,12,1,373,9,1,
        1,1,1,1,5,1,377,8,1,10,1,12,1,380,9,1,1,1,5,1,383,8,1,10,1,12,1,
        386,9,1,1,1,1,1,5,1,390,8,1,10,1,12,1,393,9,1,4,1,395,8,1,11,1,12,
        1,396,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,409,8,3,10,3,12,
        3,412,9,3,1,3,1,3,5,3,416,8,3,10,3,12,3,419,9,3,1,3,1,3,1,4,1,4,
        1,4,5,4,426,8,4,10,4,12,4,429,9,4,1,4,1,4,5,4,433,8,4,10,4,12,4,
        436,9,4,1,4,1,4,5,4,440,8,4,10,4,12,4,443,9,4,1,4,1,4,5,4,447,8,
        4,10,4,12,4,450,9,4,4,4,452,8,4,11,4,12,4,453,1,4,1,4,1,4,1,4,1,
        4,5,4,461,8,4,10,4,12,4,464,9,4,1,4,1,4,5,4,468,8,4,10,4,12,4,471,
        9,4,1,4,1,4,1,4,3,4,476,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,485,
        8,5,1,6,1,6,1,6,1,6,1,6,4,6,492,8,6,11,6,12,6,493,1,6,1,6,3,6,498,
        8,6,1,7,3,7,501,8,7,1,7,3,7,504,8,7,1,7,3,7,507,8,7,1,7,1,7,3,7,
        511,8,7,1,7,3,7,514,8,7,1,7,3,7,517,8,7,1,7,1,7,3,7,521,8,7,1,7,
        3,7,524,8,7,1,7,1,7,5,7,528,8,7,10,7,12,7,531,9,7,3,7,533,8,7,1,
        8,5,8,536,8,8,10,8,12,8,539,9,8,1,8,1,8,1,8,3,8,544,8,8,1,8,1,8,
        1,8,5,8,549,8,8,10,8,12,8,552,9,8,1,9,5,9,555,8,9,10,9,12,9,558,
        9,9,1,9,1,9,1,9,5,9,563,8,9,10,9,12,9,566,9,9,1,9,1,9,5,9,570,8,
        9,10,9,12,9,573,9,9,3,9,575,8,9,1,10,5,10,578,8,10,10,10,12,10,581,
        9,10,1,10,1,10,5,10,585,8,10,10,10,12,10,588,9,10,1,10,1,10,1,10,
        5,10,593,8,10,10,10,12,10,596,9,10,5,10,598,8,10,10,10,12,10,601,
        9,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,611,8,10,10,10,
        12,10,614,9,10,1,10,1,10,3,10,618,8,10,1,10,1,10,1,11,5,11,623,8,
        11,10,11,12,11,626,9,11,1,11,1,11,1,11,1,11,3,11,632,8,11,1,11,1,
        11,5,11,636,8,11,10,11,12,11,639,9,11,1,11,1,11,5,11,643,8,11,10,
        11,12,11,646,9,11,3,11,648,8,11,1,12,5,12,651,8,12,10,12,12,12,654,
        9,12,1,12,1,12,1,12,1,12,3,12,660,8,12,1,12,1,12,5,12,664,8,12,10,
        12,12,12,667,9,12,1,12,1,12,5,12,671,8,12,10,12,12,12,674,9,12,3,
        12,676,8,12,1,13,5,13,679,8,13,10,13,12,13,682,9,13,1,13,1,13,1,
        13,5,13,687,8,13,10,13,12,13,690,9,13,1,13,1,13,5,13,694,8,13,10,
        13,12,13,697,9,13,1,13,5,13,700,8,13,10,13,12,13,703,9,13,1,13,1,
        13,5,13,707,8,13,10,13,12,13,710,9,13,3,13,712,8,13,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,723,8,15,1,15,1,15,1,15,1,
        15,3,15,729,8,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,5,20,752,
        8,20,10,20,12,20,755,9,20,1,20,1,20,1,20,1,20,3,20,761,8,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,784,8,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,3,27,805,8,27,1,27,1,27,1,27,3,27,810,8,27,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,5,28,827,8,28,10,28,12,28,830,9,28,3,28,832,8,28,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,3,30,842,8,30,1,30,1,30,1,30,3,30,847,
        8,30,1,31,3,31,850,8,31,1,31,1,31,3,31,854,8,31,1,32,1,32,1,33,5,
        33,859,8,33,10,33,12,33,862,9,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,3,33,873,8,33,1,33,1,33,1,33,1,33,3,33,879,8,33,1,33,
        1,33,1,33,1,33,3,33,885,8,33,1,33,1,33,1,33,1,33,3,33,891,8,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,904,8,
        33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,
        39,1,39,1,40,3,40,921,8,40,1,40,1,40,5,40,925,8,40,10,40,12,40,928,
        9,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,
        1,48,1,49,5,49,970,8,49,10,49,12,49,973,9,49,1,49,1,49,1,49,1,49,
        1,49,3,49,980,8,49,1,49,1,49,1,49,5,49,985,8,49,10,49,12,49,988,
        9,49,1,49,1,49,1,49,1,49,1,49,3,49,995,8,49,1,50,1,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,52,1,52,3,52,1007,8,52,1,52,1,52,1,52,3,52,
        1012,8,52,5,52,1014,8,52,10,52,12,52,1017,9,52,1,53,1,53,1,53,5,
        53,1022,8,53,10,53,12,53,1025,9,53,1,53,1,53,3,53,1029,8,53,1,54,
        1,54,1,55,5,55,1034,8,55,10,55,12,55,1037,9,55,1,55,1,55,1,55,1,
        55,1,55,1,56,1,56,1,56,5,56,1047,8,56,10,56,12,56,1050,9,56,1,56,
        1,56,5,56,1054,8,56,10,56,12,56,1057,9,56,1,56,1,56,5,56,1061,8,
        56,10,56,12,56,1064,9,56,1,56,1,56,5,56,1068,8,56,10,56,12,56,1071,
        9,56,4,56,1073,8,56,11,56,12,56,1074,1,56,1,56,1,56,1,56,1,56,5,
        56,1082,8,56,10,56,12,56,1085,9,56,1,56,1,56,5,56,1089,8,56,10,56,
        12,56,1092,9,56,1,56,1,56,1,56,3,56,1097,8,56,1,57,1,57,3,57,1101,
        8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,3,58,1120,8,58,1,59,3,59,1123,8,59,1,59,
        1,59,1,59,1,59,3,59,1129,8,59,1,59,3,59,1132,8,59,1,59,1,59,1,59,
        3,59,1137,8,59,1,59,3,59,1140,8,59,1,60,3,60,1143,8,60,1,60,1,60,
        1,60,5,60,1148,8,60,10,60,12,60,1151,9,60,1,60,1,60,5,60,1155,8,
        60,10,60,12,60,1158,9,60,1,61,3,61,1161,8,61,1,61,1,61,1,61,1,61,
        1,62,1,62,3,62,1169,8,62,1,63,3,63,1172,8,63,1,63,1,63,1,63,1,63,
        1,64,1,64,1,64,1,64,1,65,3,65,1183,8,65,1,65,3,65,1186,8,65,1,65,
        1,65,3,65,1190,8,65,1,66,3,66,1193,8,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,3,66,1206,8,66,3,66,1208,8,66,1,67,
        1,67,1,67,3,67,1213,8,67,1,68,3,68,1216,8,68,1,68,1,68,1,68,1,68,
        1,69,3,69,1223,8,69,1,69,1,69,1,69,1,69,1,70,3,70,1230,8,70,1,70,
        1,70,3,70,1234,8,70,1,70,1,70,1,70,1,70,5,70,1240,8,70,10,70,12,
        70,1243,9,70,1,70,1,70,5,70,1247,8,70,10,70,12,70,1250,9,70,1,71,
        3,71,1253,8,71,1,71,1,71,1,71,1,71,1,72,3,72,1260,8,72,1,72,1,72,
        1,72,1,72,1,73,3,73,1267,8,73,1,73,1,73,1,73,1,73,1,74,3,74,1274,
        8,74,1,74,1,74,1,74,3,74,1279,8,74,1,74,1,74,1,74,1,75,3,75,1285,
        8,75,1,75,1,75,1,75,3,75,1290,8,75,1,75,1,75,1,75,1,75,5,75,1296,
        8,75,10,75,12,75,1299,9,75,1,75,1,75,5,75,1303,8,75,10,75,12,75,
        1306,9,75,3,75,1308,8,75,1,76,3,76,1311,8,76,1,76,1,76,1,76,3,76,
        1316,8,76,1,76,1,76,1,76,1,77,3,77,1322,8,77,1,77,1,77,1,77,3,77,
        1327,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1337,8,77,
        1,77,1,77,1,78,3,78,1342,8,78,1,78,1,78,1,78,3,78,1347,8,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1359,8,78,1,78,
        1,78,1,79,1,79,1,79,1,79,1,79,5,79,1368,8,79,10,79,12,79,1371,9,
        79,1,79,1,79,1,79,3,79,1376,8,79,1,80,5,80,1379,8,80,10,80,12,80,
        1382,9,80,1,80,1,80,5,80,1386,8,80,10,80,12,80,1389,9,80,1,80,5,
        80,1392,8,80,10,80,12,80,1395,9,80,1,80,1,80,5,80,1399,8,80,10,80,
        12,80,1402,9,80,1,80,5,80,1405,8,80,10,80,12,80,1408,9,80,1,80,1,
        80,5,80,1412,8,80,10,80,12,80,1415,9,80,1,80,5,80,1418,8,80,10,80,
        12,80,1421,9,80,1,80,1,80,5,80,1425,8,80,10,80,12,80,1428,9,80,3,
        80,1430,8,80,1,81,1,81,1,82,3,82,1435,8,82,1,82,1,82,1,82,3,82,1440,
        8,82,1,83,1,83,1,84,1,84,1,84,3,84,1447,8,84,1,85,1,85,1,86,1,86,
        1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,3,88,1464,
        8,88,1,89,1,89,1,90,1,90,3,90,1470,8,90,1,91,3,91,1473,8,91,1,91,
        1,91,1,91,3,91,1478,8,91,1,91,3,91,1481,8,91,1,91,3,91,1484,8,91,
        1,92,1,92,1,93,1,93,1,94,1,94,3,94,1492,8,94,1,95,3,95,1495,8,95,
        1,95,3,95,1498,8,95,1,95,1,95,3,95,1502,8,95,1,95,1,95,3,95,1506,
        8,95,1,96,1,96,4,96,1510,8,96,11,96,12,96,1511,1,97,1,97,1,97,1,
        98,1,98,1,99,1,99,3,99,1521,8,99,1,100,3,100,1524,8,100,1,100,1,
        100,1,101,3,101,1529,8,101,1,101,1,101,3,101,1533,8,101,1,101,1,
        101,1,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,1,105,
        1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,108,1,108,3,108,1556,
        8,108,1,109,1,109,1,109,5,109,1561,8,109,10,109,12,109,1564,9,109,
        1,109,1,109,1,110,1,110,1,110,1,111,1,111,1,111,1,112,1,112,1,112,
        1,112,3,112,1578,8,112,1,113,1,113,1,113,1,113,3,113,1584,8,113,
        1,114,1,114,1,114,5,114,1589,8,114,10,114,12,114,1592,9,114,1,114,
        1,114,1,114,5,114,1597,8,114,10,114,12,114,1600,9,114,1,114,1,114,
        1,114,1,114,3,114,1606,8,114,1,115,1,115,1,115,5,115,1611,8,115,
        10,115,12,115,1614,9,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        5,116,1623,8,116,10,116,12,116,1626,9,116,1,116,1,116,1,116,3,116,
        1631,8,116,1,117,1,117,1,117,5,117,1636,8,117,10,117,12,117,1639,
        9,117,1,118,1,118,3,118,1643,8,118,1,119,1,119,1,119,5,119,1648,
        8,119,10,119,12,119,1651,9,119,1,119,1,119,1,120,1,120,1,120,1,121,
        1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1668,
        8,122,1,122,1,122,1,122,1,123,1,123,1,123,1,124,1,124,3,124,1678,
        8,124,1,125,1,125,1,125,5,125,1683,8,125,10,125,12,125,1686,9,125,
        1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,1,128,1,128,3,128,
        1698,8,128,1,129,1,129,1,129,5,129,1703,8,129,10,129,12,129,1706,
        9,129,1,129,1,129,1,130,1,130,1,130,1,131,1,131,1,131,1,132,1,132,
        1,132,1,132,1,132,3,132,1721,8,132,1,133,1,133,1,133,5,133,1726,
        8,133,10,133,12,133,1729,9,133,1,133,1,133,1,134,1,134,1,134,5,134,
        1736,8,134,10,134,12,134,1739,9,134,1,134,1,134,1,135,1,135,1,135,
        5,135,1746,8,135,10,135,12,135,1749,9,135,1,135,1,135,1,136,1,136,
        1,136,5,136,1756,8,136,10,136,12,136,1759,9,136,1,136,1,136,1,137,
        1,137,1,137,5,137,1766,8,137,10,137,12,137,1769,9,137,1,137,1,137,
        1,138,1,138,1,138,3,138,1776,8,138,1,139,1,139,1,139,1,140,1,140,
        1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,1823,8,143,1,144,
        1,144,1,145,1,145,1,146,1,146,1,147,1,147,1,148,1,148,1,149,1,149,
        1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,1846,
        8,150,1,151,1,151,1,152,1,152,1,153,1,153,1,153,1,153,1,154,1,154,
        1,155,1,155,1,155,3,155,1861,8,155,1,156,1,156,1,157,1,157,1,157,
        1,157,1,158,1,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,
        1,163,1,163,1,164,1,164,1,165,1,165,1,165,5,165,1886,8,165,10,165,
        12,165,1889,9,165,1,165,1,165,3,165,1893,8,165,1,165,1,165,1,165,
        3,165,1898,8,165,1,166,1,166,1,167,1,167,1,168,1,168,1,169,1,169,
        1,170,1,170,1,170,1,345,0,171,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,0,23,1,0,38,39,1,0,15,16,2,0,22,22,26,26,2,0,70,
        70,72,72,1,0,86,92,1,0,94,95,1,0,97,100,1,0,110,115,2,0,118,118,
        120,122,2,0,117,117,119,119,1,0,135,136,1,0,70,73,1,0,122,123,2,
        0,41,43,47,48,1,0,51,52,1,0,22,23,1,0,18,23,1,0,18,31,1,0,24,25,
        2,0,24,25,32,33,1,0,34,35,1,0,132,133,1,0,75,78,2002,0,366,1,0,0,
        0,2,394,1,0,0,0,4,398,1,0,0,0,6,404,1,0,0,0,8,475,1,0,0,0,10,484,
        1,0,0,0,12,497,1,0,0,0,14,532,1,0,0,0,16,537,1,0,0,0,18,556,1,0,
        0,0,20,579,1,0,0,0,22,624,1,0,0,0,24,652,1,0,0,0,26,711,1,0,0,0,
        28,713,1,0,0,0,30,715,1,0,0,0,32,732,1,0,0,0,34,734,1,0,0,0,36,738,
        1,0,0,0,38,742,1,0,0,0,40,753,1,0,0,0,42,762,1,0,0,0,44,769,1,0,
        0,0,46,776,1,0,0,0,48,787,1,0,0,0,50,792,1,0,0,0,52,796,1,0,0,0,
        54,809,1,0,0,0,56,831,1,0,0,0,58,833,1,0,0,0,60,846,1,0,0,0,62,853,
        1,0,0,0,64,855,1,0,0,0,66,860,1,0,0,0,68,907,1,0,0,0,70,909,1,0,
        0,0,72,911,1,0,0,0,74,913,1,0,0,0,76,915,1,0,0,0,78,917,1,0,0,0,
        80,920,1,0,0,0,82,929,1,0,0,0,84,933,1,0,0,0,86,946,1,0,0,0,88,950,
        1,0,0,0,90,954,1,0,0,0,92,958,1,0,0,0,94,962,1,0,0,0,96,966,1,0,
        0,0,98,994,1,0,0,0,100,996,1,0,0,0,102,1000,1,0,0,0,104,1006,1,0,
        0,0,106,1018,1,0,0,0,108,1030,1,0,0,0,110,1035,1,0,0,0,112,1096,
        1,0,0,0,114,1100,1,0,0,0,116,1119,1,0,0,0,118,1139,1,0,0,0,120,1142,
        1,0,0,0,122,1160,1,0,0,0,124,1168,1,0,0,0,126,1171,1,0,0,0,128,1177,
        1,0,0,0,130,1182,1,0,0,0,132,1192,1,0,0,0,134,1212,1,0,0,0,136,1215,
        1,0,0,0,138,1222,1,0,0,0,140,1233,1,0,0,0,142,1252,1,0,0,0,144,1259,
        1,0,0,0,146,1266,1,0,0,0,148,1278,1,0,0,0,150,1289,1,0,0,0,152,1315,
        1,0,0,0,154,1326,1,0,0,0,156,1346,1,0,0,0,158,1375,1,0,0,0,160,1429,
        1,0,0,0,162,1431,1,0,0,0,164,1434,1,0,0,0,166,1441,1,0,0,0,168,1446,
        1,0,0,0,170,1448,1,0,0,0,172,1450,1,0,0,0,174,1454,1,0,0,0,176,1463,
        1,0,0,0,178,1465,1,0,0,0,180,1469,1,0,0,0,182,1472,1,0,0,0,184,1485,
        1,0,0,0,186,1487,1,0,0,0,188,1491,1,0,0,0,190,1494,1,0,0,0,192,1509,
        1,0,0,0,194,1513,1,0,0,0,196,1516,1,0,0,0,198,1520,1,0,0,0,200,1523,
        1,0,0,0,202,1528,1,0,0,0,204,1536,1,0,0,0,206,1539,1,0,0,0,208,1542,
        1,0,0,0,210,1545,1,0,0,0,212,1547,1,0,0,0,214,1550,1,0,0,0,216,1555,
        1,0,0,0,218,1562,1,0,0,0,220,1567,1,0,0,0,222,1570,1,0,0,0,224,1573,
        1,0,0,0,226,1579,1,0,0,0,228,1605,1,0,0,0,230,1607,1,0,0,0,232,1630,
        1,0,0,0,234,1632,1,0,0,0,236,1642,1,0,0,0,238,1649,1,0,0,0,240,1654,
        1,0,0,0,242,1657,1,0,0,0,244,1667,1,0,0,0,246,1672,1,0,0,0,248,1677,
        1,0,0,0,250,1684,1,0,0,0,252,1689,1,0,0,0,254,1692,1,0,0,0,256,1697,
        1,0,0,0,258,1704,1,0,0,0,260,1709,1,0,0,0,262,1712,1,0,0,0,264,1720,
        1,0,0,0,266,1727,1,0,0,0,268,1737,1,0,0,0,270,1747,1,0,0,0,272,1757,
        1,0,0,0,274,1767,1,0,0,0,276,1775,1,0,0,0,278,1777,1,0,0,0,280,1780,
        1,0,0,0,282,1782,1,0,0,0,284,1784,1,0,0,0,286,1822,1,0,0,0,288,1824,
        1,0,0,0,290,1826,1,0,0,0,292,1828,1,0,0,0,294,1830,1,0,0,0,296,1832,
        1,0,0,0,298,1834,1,0,0,0,300,1845,1,0,0,0,302,1847,1,0,0,0,304,1849,
        1,0,0,0,306,1851,1,0,0,0,308,1855,1,0,0,0,310,1860,1,0,0,0,312,1862,
        1,0,0,0,314,1864,1,0,0,0,316,1868,1,0,0,0,318,1870,1,0,0,0,320,1872,
        1,0,0,0,322,1874,1,0,0,0,324,1876,1,0,0,0,326,1878,1,0,0,0,328,1880,
        1,0,0,0,330,1882,1,0,0,0,332,1899,1,0,0,0,334,1901,1,0,0,0,336,1903,
        1,0,0,0,338,1905,1,0,0,0,340,1907,1,0,0,0,342,344,3,110,55,0,343,
        342,1,0,0,0,344,347,1,0,0,0,345,346,1,0,0,0,345,343,1,0,0,0,346,
        349,1,0,0,0,347,345,1,0,0,0,348,350,3,66,33,0,349,348,1,0,0,0,349,
        350,1,0,0,0,350,354,1,0,0,0,351,353,3,14,7,0,352,351,1,0,0,0,353,
        356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,358,1,0,0,0,356,
        354,1,0,0,0,357,359,3,2,1,0,358,357,1,0,0,0,358,359,1,0,0,0,359,
        367,1,0,0,0,360,362,3,20,10,0,361,360,1,0,0,0,362,365,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,366,
        345,1,0,0,0,366,363,1,0,0,0,367,1,1,0,0,0,368,370,3,336,168,0,369,
        368,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,
        374,1,0,0,0,373,371,1,0,0,0,374,378,3,4,2,0,375,377,3,336,168,0,
        376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,
        379,395,1,0,0,0,380,378,1,0,0,0,381,383,3,336,168,0,382,381,1,0,
        0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,
        0,0,386,384,1,0,0,0,387,391,3,6,3,0,388,390,3,336,168,0,389,388,
        1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,395,
        1,0,0,0,393,391,1,0,0,0,394,371,1,0,0,0,394,384,1,0,0,0,395,396,
        1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,3,1,0,0,0,398,399,5,
        13,0,0,399,400,3,12,6,0,400,401,5,32,0,0,401,402,3,334,167,0,402,
        403,5,4,0,0,403,5,1,0,0,0,404,405,5,13,0,0,405,406,3,12,6,0,406,
        410,5,12,0,0,407,409,3,336,168,0,408,407,1,0,0,0,409,412,1,0,0,0,
        410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,
        413,417,3,8,4,0,414,416,3,336,168,0,415,414,1,0,0,0,416,419,1,0,
        0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,
        0,0,420,421,5,4,0,0,421,7,1,0,0,0,422,423,7,0,0,0,423,427,5,6,0,
        0,424,426,3,336,168,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,
        0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,434,3,
        8,4,0,431,433,3,336,168,0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,
        1,0,0,0,434,435,1,0,0,0,435,451,1,0,0,0,436,434,1,0,0,0,437,441,
        5,2,0,0,438,440,3,336,168,0,439,438,1,0,0,0,440,443,1,0,0,0,441,
        439,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,
        448,3,8,4,0,445,447,3,336,168,0,446,445,1,0,0,0,447,450,1,0,0,0,
        448,446,1,0,0,0,448,449,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,
        451,437,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,
        454,455,1,0,0,0,455,456,5,7,0,0,456,476,1,0,0,0,457,458,5,40,0,0,
        458,462,5,6,0,0,459,461,3,336,168,0,460,459,1,0,0,0,461,464,1,0,
        0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,462,1,0,
        0,0,465,469,3,8,4,0,466,468,3,336,168,0,467,466,1,0,0,0,468,471,
        1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,
        1,0,0,0,472,473,5,7,0,0,473,476,1,0,0,0,474,476,3,10,5,0,475,422,
        1,0,0,0,475,457,1,0,0,0,475,474,1,0,0,0,476,9,1,0,0,0,477,478,3,
        334,167,0,478,479,5,1,0,0,479,480,5,37,0,0,480,481,3,318,159,0,481,
        482,3,164,82,0,482,485,1,0,0,0,483,485,3,334,167,0,484,477,1,0,0,
        0,484,483,1,0,0,0,485,11,1,0,0,0,486,498,3,334,167,0,487,488,5,6,
        0,0,488,491,3,334,167,0,489,490,5,2,0,0,490,492,3,334,167,0,491,
        489,1,0,0,0,492,493,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,
        495,1,0,0,0,495,496,5,7,0,0,496,498,1,0,0,0,497,486,1,0,0,0,497,
        487,1,0,0,0,498,13,1,0,0,0,499,501,3,98,49,0,500,499,1,0,0,0,500,
        501,1,0,0,0,501,503,1,0,0,0,502,504,3,40,20,0,503,502,1,0,0,0,503,
        504,1,0,0,0,504,506,1,0,0,0,505,507,3,84,42,0,506,505,1,0,0,0,506,
        507,1,0,0,0,507,508,1,0,0,0,508,533,3,16,8,0,509,511,3,40,20,0,510,
        509,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,514,3,98,49,0,513,
        512,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,517,3,84,42,0,516,
        515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,533,3,16,8,0,519,
        521,3,98,49,0,520,519,1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,
        524,3,84,42,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,
        529,3,28,14,0,526,528,3,30,15,0,527,526,1,0,0,0,528,531,1,0,0,0,
        529,527,1,0,0,0,529,530,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,
        532,500,1,0,0,0,532,510,1,0,0,0,532,520,1,0,0,0,533,15,1,0,0,0,534,
        536,3,336,168,0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,
        537,538,1,0,0,0,538,543,1,0,0,0,539,537,1,0,0,0,540,541,3,334,167,
        0,541,542,5,3,0,0,542,544,1,0,0,0,543,540,1,0,0,0,543,544,1,0,0,
        0,544,545,1,0,0,0,545,546,3,18,9,0,546,550,5,4,0,0,547,549,3,336,
        168,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,
        0,0,0,551,17,1,0,0,0,552,550,1,0,0,0,553,555,3,336,168,0,554,553,
        1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,559,
        1,0,0,0,558,556,1,0,0,0,559,574,3,330,165,0,560,564,5,12,0,0,561,
        563,3,336,168,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,
        564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,571,3,112,56,
        0,568,570,3,336,168,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,
        0,0,0,571,572,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,574,560,1,
        0,0,0,574,575,1,0,0,0,575,19,1,0,0,0,576,578,3,336,168,0,577,576,
        1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,582,
        1,0,0,0,581,579,1,0,0,0,582,586,3,22,11,0,583,585,3,336,168,0,584,
        583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,
        599,1,0,0,0,588,586,1,0,0,0,589,590,5,1,0,0,590,594,3,24,12,0,591,
        593,3,336,168,0,592,591,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,
        594,595,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,597,589,1,0,0,0,
        598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,
        601,599,1,0,0,0,602,603,5,1,0,0,603,617,5,64,0,0,604,605,5,6,0,0,
        605,618,5,7,0,0,606,607,5,6,0,0,607,612,3,332,166,0,608,609,5,2,
        0,0,609,611,3,332,166,0,610,608,1,0,0,0,611,614,1,0,0,0,612,610,
        1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,612,1,0,0,0,615,616,
        5,7,0,0,616,618,1,0,0,0,617,604,1,0,0,0,617,606,1,0,0,0,618,619,
        1,0,0,0,619,620,5,4,0,0,620,21,1,0,0,0,621,623,3,336,168,0,622,621,
        1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,
        1,0,0,0,626,624,1,0,0,0,627,631,5,117,0,0,628,632,3,332,166,0,629,
        630,5,14,0,0,630,632,3,332,166,0,631,628,1,0,0,0,631,629,1,0,0,0,
        631,632,1,0,0,0,632,647,1,0,0,0,633,637,5,12,0,0,634,636,3,336,168,
        0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,
        0,638,640,1,0,0,0,639,637,1,0,0,0,640,644,3,112,56,0,641,643,3,336,
        168,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,
        0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,647,633,1,0,0,0,647,648,1,
        0,0,0,648,23,1,0,0,0,649,651,3,336,168,0,650,649,1,0,0,0,651,654,
        1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,
        1,0,0,0,655,659,3,276,138,0,656,660,3,332,166,0,657,658,5,14,0,0,
        658,660,3,332,166,0,659,656,1,0,0,0,659,657,1,0,0,0,659,660,1,0,
        0,0,660,675,1,0,0,0,661,665,5,12,0,0,662,664,3,336,168,0,663,662,
        1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,668,
        1,0,0,0,667,665,1,0,0,0,668,672,3,112,56,0,669,671,3,336,168,0,670,
        669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
        676,1,0,0,0,674,672,1,0,0,0,675,661,1,0,0,0,675,676,1,0,0,0,676,
        25,1,0,0,0,677,679,3,336,168,0,678,677,1,0,0,0,679,682,1,0,0,0,680,
        678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,680,1,0,0,0,683,
        684,3,330,165,0,684,688,5,12,0,0,685,687,3,336,168,0,686,685,1,0,
        0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,691,1,0,
        0,0,690,688,1,0,0,0,691,695,3,112,56,0,692,694,3,336,168,0,693,692,
        1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,712,
        1,0,0,0,697,695,1,0,0,0,698,700,3,336,168,0,699,698,1,0,0,0,700,
        703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,
        701,1,0,0,0,704,708,3,330,165,0,705,707,3,336,168,0,706,705,1,0,
        0,0,707,710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,712,1,0,
        0,0,710,708,1,0,0,0,711,680,1,0,0,0,711,701,1,0,0,0,712,27,1,0,0,
        0,713,714,5,53,0,0,714,29,1,0,0,0,715,716,5,55,0,0,716,717,5,5,0,
        0,717,718,5,10,0,0,718,719,3,34,17,0,719,722,5,2,0,0,720,723,3,36,
        18,0,721,723,3,38,19,0,722,720,1,0,0,0,722,721,1,0,0,0,723,728,1,
        0,0,0,724,725,5,2,0,0,725,726,5,54,0,0,726,727,5,5,0,0,727,729,3,
        32,16,0,728,724,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,
        5,11,0,0,731,31,1,0,0,0,732,733,7,1,0,0,733,33,1,0,0,0,734,735,5,
        57,0,0,735,736,7,2,0,0,736,737,3,170,85,0,737,35,1,0,0,0,738,739,
        5,56,0,0,739,740,7,2,0,0,740,741,3,170,85,0,741,37,1,0,0,0,742,743,
        5,58,0,0,743,744,7,2,0,0,744,745,3,170,85,0,745,746,5,2,0,0,746,
        747,5,59,0,0,747,748,7,2,0,0,748,749,3,170,85,0,749,39,1,0,0,0,750,
        752,3,336,168,0,751,750,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,
        753,754,1,0,0,0,754,760,1,0,0,0,755,753,1,0,0,0,756,761,3,42,21,
        0,757,761,3,44,22,0,758,761,3,46,23,0,759,761,3,48,24,0,760,756,
        1,0,0,0,760,757,1,0,0,0,760,758,1,0,0,0,760,759,1,0,0,0,761,41,1,
        0,0,0,762,763,5,60,0,0,763,764,5,6,0,0,764,765,3,52,26,0,765,766,
        5,2,0,0,766,767,3,58,29,0,767,768,5,7,0,0,768,43,1,0,0,0,769,770,
        5,61,0,0,770,771,5,6,0,0,771,772,3,50,25,0,772,773,5,2,0,0,773,774,
        3,58,29,0,774,775,5,7,0,0,775,45,1,0,0,0,776,777,5,62,0,0,777,778,
        5,6,0,0,778,779,3,50,25,0,779,780,5,2,0,0,780,783,3,52,26,0,781,
        782,5,2,0,0,782,784,3,58,29,0,783,781,1,0,0,0,783,784,1,0,0,0,784,
        785,1,0,0,0,785,786,5,7,0,0,786,47,1,0,0,0,787,788,5,63,0,0,788,
        789,5,6,0,0,789,790,3,50,25,0,790,791,5,7,0,0,791,49,1,0,0,0,792,
        793,5,65,0,0,793,794,5,5,0,0,794,795,3,54,27,0,795,51,1,0,0,0,796,
        797,5,66,0,0,797,798,5,5,0,0,798,799,3,54,27,0,799,53,1,0,0,0,800,
        801,5,8,0,0,801,804,3,56,28,0,802,803,5,2,0,0,803,805,3,56,28,0,
        804,802,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,807,5,9,0,0,
        807,810,1,0,0,0,808,810,3,56,28,0,809,800,1,0,0,0,809,808,1,0,0,
        0,810,55,1,0,0,0,811,832,5,69,0,0,812,832,5,68,0,0,813,832,5,138,
        0,0,814,815,5,138,0,0,815,816,5,72,0,0,816,832,5,138,0,0,817,818,
        5,138,0,0,818,819,5,1,0,0,819,820,5,1,0,0,820,832,5,1,0,0,821,828,
        5,138,0,0,822,823,5,1,0,0,823,824,5,1,0,0,824,825,5,74,0,0,825,827,
        5,138,0,0,826,822,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,
        1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,831,811,1,0,0,0,831,812,
        1,0,0,0,831,813,1,0,0,0,831,814,1,0,0,0,831,817,1,0,0,0,831,821,
        1,0,0,0,832,57,1,0,0,0,833,834,5,67,0,0,834,835,5,5,0,0,835,836,
        3,60,30,0,836,59,1,0,0,0,837,838,5,8,0,0,838,841,3,62,31,0,839,840,
        5,2,0,0,840,842,3,62,31,0,841,839,1,0,0,0,841,842,1,0,0,0,842,843,
        1,0,0,0,843,844,5,9,0,0,844,847,1,0,0,0,845,847,3,62,31,0,846,837,
        1,0,0,0,846,845,1,0,0,0,847,61,1,0,0,0,848,850,3,64,32,0,849,848,
        1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,854,5,134,0,0,852,854,
        5,97,0,0,853,849,1,0,0,0,853,852,1,0,0,0,854,63,1,0,0,0,855,856,
        7,3,0,0,856,65,1,0,0,0,857,859,3,336,168,0,858,857,1,0,0,0,859,862,
        1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,860,
        1,0,0,0,863,864,5,81,0,0,864,865,5,6,0,0,865,866,5,82,0,0,866,867,
        5,5,0,0,867,872,3,68,34,0,868,869,5,2,0,0,869,870,5,85,0,0,870,871,
        5,5,0,0,871,873,3,70,35,0,872,868,1,0,0,0,872,873,1,0,0,0,873,878,
        1,0,0,0,874,875,5,2,0,0,875,876,5,93,0,0,876,877,5,5,0,0,877,879,
        3,72,36,0,878,874,1,0,0,0,878,879,1,0,0,0,879,884,1,0,0,0,880,881,
        5,2,0,0,881,882,5,96,0,0,882,883,5,5,0,0,883,885,3,74,37,0,884,880,
        1,0,0,0,884,885,1,0,0,0,885,890,1,0,0,0,886,887,5,2,0,0,887,888,
        5,83,0,0,888,889,5,5,0,0,889,891,3,76,38,0,890,886,1,0,0,0,890,891,
        1,0,0,0,891,892,1,0,0,0,892,893,5,2,0,0,893,894,5,84,0,0,894,895,
        5,5,0,0,895,903,3,78,39,0,896,897,5,2,0,0,897,898,5,101,0,0,898,
        899,5,5,0,0,899,900,5,6,0,0,900,901,3,80,40,0,901,902,5,7,0,0,902,
        904,1,0,0,0,903,896,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,
        906,5,7,0,0,906,67,1,0,0,0,907,908,3,170,85,0,908,69,1,0,0,0,909,
        910,7,4,0,0,910,71,1,0,0,0,911,912,7,5,0,0,912,73,1,0,0,0,913,914,
        7,6,0,0,914,75,1,0,0,0,915,916,3,170,85,0,916,77,1,0,0,0,917,918,
        3,170,85,0,918,79,1,0,0,0,919,921,3,82,41,0,920,919,1,0,0,0,920,
        921,1,0,0,0,921,926,1,0,0,0,922,923,5,2,0,0,923,925,3,82,41,0,924,
        922,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,
        81,1,0,0,0,928,926,1,0,0,0,929,930,3,170,85,0,930,931,5,5,0,0,931,
        932,3,170,85,0,932,83,1,0,0,0,933,934,5,104,0,0,934,935,5,6,0,0,
        935,936,3,86,43,0,936,937,5,2,0,0,937,938,3,88,44,0,938,939,5,2,
        0,0,939,940,3,90,45,0,940,941,5,2,0,0,941,942,3,92,46,0,942,943,
        5,2,0,0,943,944,3,94,47,0,944,945,5,7,0,0,945,85,1,0,0,0,946,947,
        5,105,0,0,947,948,5,5,0,0,948,949,3,170,85,0,949,87,1,0,0,0,950,
        951,5,106,0,0,951,952,5,5,0,0,952,953,3,170,85,0,953,89,1,0,0,0,
        954,955,5,107,0,0,955,956,5,5,0,0,956,957,3,170,85,0,957,91,1,0,
        0,0,958,959,5,108,0,0,959,960,5,5,0,0,960,961,3,170,85,0,961,93,
        1,0,0,0,962,963,5,109,0,0,963,964,5,5,0,0,964,965,3,96,48,0,965,
        95,1,0,0,0,966,967,7,7,0,0,967,97,1,0,0,0,968,970,3,336,168,0,969,
        968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,
        974,1,0,0,0,973,971,1,0,0,0,974,975,5,102,0,0,975,976,5,6,0,0,976,
        979,3,100,50,0,977,978,5,2,0,0,978,980,3,102,51,0,979,977,1,0,0,
        0,979,980,1,0,0,0,980,981,1,0,0,0,981,982,5,7,0,0,982,995,1,0,0,
        0,983,985,3,336,168,0,984,983,1,0,0,0,985,988,1,0,0,0,986,984,1,
        0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,986,1,0,0,0,989,990,5,
        102,0,0,990,991,5,6,0,0,991,992,3,102,51,0,992,993,5,7,0,0,993,995,
        1,0,0,0,994,971,1,0,0,0,994,986,1,0,0,0,995,99,1,0,0,0,996,997,5,
        84,0,0,997,998,5,5,0,0,998,999,3,104,52,0,999,101,1,0,0,0,1000,1001,
        5,103,0,0,1001,1002,5,5,0,0,1002,1003,3,170,85,0,1003,103,1,0,0,
        0,1004,1007,3,106,53,0,1005,1007,3,170,85,0,1006,1004,1,0,0,0,1006,
        1005,1,0,0,0,1007,1015,1,0,0,0,1008,1011,5,70,0,0,1009,1012,3,106,
        53,0,1010,1012,3,170,85,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,
        1014,1,0,0,0,1013,1008,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,
        0,1015,1016,1,0,0,0,1016,105,1,0,0,0,1017,1015,1,0,0,0,1018,1023,
        3,332,166,0,1019,1020,5,1,0,0,1020,1022,3,276,138,0,1021,1019,1,
        0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,
        1028,1,0,0,0,1025,1023,1,0,0,0,1026,1027,5,1,0,0,1027,1029,3,108,
        54,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,107,1,0,0,0,1030,1031,
        7,8,0,0,1031,109,1,0,0,0,1032,1034,3,336,168,0,1033,1032,1,0,0,0,
        1034,1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1038,
        1,0,0,0,1037,1035,1,0,0,0,1038,1039,5,116,0,0,1039,1040,5,6,0,0,
        1040,1041,3,170,85,0,1041,1042,5,7,0,0,1042,111,1,0,0,0,1043,1044,
        7,0,0,0,1044,1048,5,6,0,0,1045,1047,3,336,168,0,1046,1045,1,0,0,
        0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1051,
        1,0,0,0,1050,1048,1,0,0,0,1051,1055,3,112,56,0,1052,1054,3,336,168,
        0,1053,1052,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,
        1,0,0,0,1056,1072,1,0,0,0,1057,1055,1,0,0,0,1058,1062,5,2,0,0,1059,
        1061,3,336,168,0,1060,1059,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,
        0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1062,1,0,0,0,1065,
        1069,3,112,56,0,1066,1068,3,336,168,0,1067,1066,1,0,0,0,1068,1071,
        1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,1073,1,0,0,0,1071,
        1069,1,0,0,0,1072,1058,1,0,0,0,1073,1074,1,0,0,0,1074,1072,1,0,0,
        0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1077,5,7,0,0,1077,1097,
        1,0,0,0,1078,1079,5,40,0,0,1079,1083,5,6,0,0,1080,1082,3,336,168,
        0,1081,1080,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,
        1,0,0,0,1084,1086,1,0,0,0,1085,1083,1,0,0,0,1086,1090,3,112,56,0,
        1087,1089,3,336,168,0,1088,1087,1,0,0,0,1089,1092,1,0,0,0,1090,1088,
        1,0,0,0,1090,1091,1,0,0,0,1091,1093,1,0,0,0,1092,1090,1,0,0,0,1093,
        1094,5,7,0,0,1094,1097,1,0,0,0,1095,1097,3,114,57,0,1096,1043,1,
        0,0,0,1096,1078,1,0,0,0,1096,1095,1,0,0,0,1097,113,1,0,0,0,1098,
        1101,3,116,58,0,1099,1101,3,158,79,0,1100,1098,1,0,0,0,1100,1099,
        1,0,0,0,1101,115,1,0,0,0,1102,1120,3,118,59,0,1103,1120,3,120,60,
        0,1104,1120,3,122,61,0,1105,1120,3,124,62,0,1106,1120,3,132,66,0,
        1107,1120,3,134,67,0,1108,1120,3,136,68,0,1109,1120,3,140,70,0,1110,
        1120,3,142,71,0,1111,1120,3,138,69,0,1112,1120,3,144,72,0,1113,1120,
        3,146,73,0,1114,1120,3,148,74,0,1115,1120,3,150,75,0,1116,1120,3,
        152,76,0,1117,1120,3,154,77,0,1118,1120,3,156,78,0,1119,1102,1,0,
        0,0,1119,1103,1,0,0,0,1119,1104,1,0,0,0,1119,1105,1,0,0,0,1119,1106,
        1,0,0,0,1119,1107,1,0,0,0,1119,1108,1,0,0,0,1119,1109,1,0,0,0,1119,
        1110,1,0,0,0,1119,1111,1,0,0,0,1119,1112,1,0,0,0,1119,1113,1,0,0,
        0,1119,1114,1,0,0,0,1119,1115,1,0,0,0,1119,1116,1,0,0,0,1119,1117,
        1,0,0,0,1119,1118,1,0,0,0,1120,117,1,0,0,0,1121,1123,3,284,142,0,
        1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
        3,216,108,0,1125,1128,3,316,158,0,1126,1129,3,162,81,0,1127,1129,
        3,222,111,0,1128,1126,1,0,0,0,1128,1127,1,0,0,0,1129,1140,1,0,0,
        0,1130,1132,3,284,142,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,
        1133,1,0,0,0,1133,1140,3,216,108,0,1134,1136,5,36,0,0,1135,1137,
        3,284,142,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,
        0,1138,1140,3,216,108,0,1139,1122,1,0,0,0,1139,1131,1,0,0,0,1139,
        1134,1,0,0,0,1140,119,1,0,0,0,1141,1143,3,284,142,0,1142,1141,1,
        0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,3,224,112,0,
        1145,1149,5,12,0,0,1146,1148,3,336,168,0,1147,1146,1,0,0,0,1148,
        1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,
        0,1151,1149,1,0,0,0,1152,1156,3,112,56,0,1153,1155,3,336,168,0,1154,
        1153,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,1,0,0,
        0,1157,121,1,0,0,0,1158,1156,1,0,0,0,1159,1161,3,284,142,0,1160,
        1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,3,224,
        112,0,1163,1164,3,326,163,0,1164,1165,3,166,83,0,1165,123,1,0,0,
        0,1166,1169,3,126,63,0,1167,1169,3,128,64,0,1168,1166,1,0,0,0,1168,
        1167,1,0,0,0,1169,125,1,0,0,0,1170,1172,3,284,142,0,1171,1170,1,
        0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1174,3,236,118,0,
        1174,1175,3,318,159,0,1175,1176,3,168,84,0,1176,127,1,0,0,0,1177,
        1178,3,130,65,0,1178,1179,3,318,159,0,1179,1180,3,168,84,0,1180,
        129,1,0,0,0,1181,1183,3,212,106,0,1182,1181,1,0,0,0,1182,1183,1,
        0,0,0,1183,1185,1,0,0,0,1184,1186,3,284,142,0,1185,1184,1,0,0,0,
        1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1189,3,236,118,0,1188,1190,
        3,214,107,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,131,1,0,0,0,
        1191,1193,3,284,142,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1194,
        1,0,0,0,1194,1207,3,248,124,0,1195,1196,3,318,159,0,1196,1197,3,
        164,82,0,1197,1208,1,0,0,0,1198,1199,3,316,158,0,1199,1200,3,162,
        81,0,1200,1208,1,0,0,0,1201,1205,3,320,160,0,1202,1206,3,170,85,
        0,1203,1206,3,262,131,0,1204,1206,3,254,127,0,1205,1202,1,0,0,0,
        1205,1203,1,0,0,0,1205,1204,1,0,0,0,1206,1208,1,0,0,0,1207,1195,
        1,0,0,0,1207,1198,1,0,0,0,1207,1201,1,0,0,0,1208,133,1,0,0,0,1209,
        1213,3,172,86,0,1210,1213,3,174,87,0,1211,1213,3,176,88,0,1212,1209,
        1,0,0,0,1212,1210,1,0,0,0,1212,1211,1,0,0,0,1213,135,1,0,0,0,1214,
        1216,3,284,142,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,
        0,0,0,1217,1218,3,266,133,0,1218,1219,3,322,161,0,1219,1220,3,162,
        81,0,1220,137,1,0,0,0,1221,1223,3,284,142,0,1222,1221,1,0,0,0,1222,
        1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,3,272,136,0,1225,1226,3,
        322,161,0,1226,1227,3,160,80,0,1227,139,1,0,0,0,1228,1230,3,284,
        142,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,
        1234,3,268,134,0,1232,1234,3,332,166,0,1233,1229,1,0,0,0,1233,1232,
        1,0,0,0,1234,1235,1,0,0,0,1235,1236,3,322,161,0,1236,1237,3,332,
        166,0,1237,1241,5,12,0,0,1238,1240,3,336,168,0,1239,1238,1,0,0,0,
        1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1244,
        1,0,0,0,1243,1241,1,0,0,0,1244,1248,3,112,56,0,1245,1247,3,336,168,
        0,1246,1245,1,0,0,0,1247,1250,1,0,0,0,1248,1246,1,0,0,0,1248,1249,
        1,0,0,0,1249,141,1,0,0,0,1250,1248,1,0,0,0,1251,1253,3,284,142,0,
        1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1255,
        3,270,135,0,1255,1256,3,322,161,0,1256,1257,3,164,82,0,1257,143,
        1,0,0,0,1258,1260,3,284,142,0,1259,1258,1,0,0,0,1259,1260,1,0,0,
        0,1260,1261,1,0,0,0,1261,1262,3,274,137,0,1262,1263,3,322,161,0,
        1263,1264,3,170,85,0,1264,145,1,0,0,0,1265,1267,3,284,142,0,1266,
        1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1269,3,244,
        122,0,1269,1270,3,318,159,0,1270,1271,3,168,84,0,1271,147,1,0,0,
        0,1272,1274,3,284,142,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
        1275,1,0,0,0,1275,1279,3,224,112,0,1276,1279,3,332,166,0,1277,1279,
        5,69,0,0,1278,1273,1,0,0,0,1278,1276,1,0,0,0,1278,1277,1,0,0,0,1279,
        1280,1,0,0,0,1280,1281,3,324,162,0,1281,1282,3,26,13,0,1282,149,
        1,0,0,0,1283,1285,3,284,142,0,1284,1283,1,0,0,0,1284,1285,1,0,0,
        0,1285,1286,1,0,0,0,1286,1290,3,224,112,0,1287,1290,3,332,166,0,
        1288,1290,5,69,0,0,1289,1284,1,0,0,0,1289,1287,1,0,0,0,1289,1288,
        1,0,0,0,1290,1291,1,0,0,0,1291,1292,3,328,164,0,1292,1307,7,9,0,
        0,1293,1297,5,12,0,0,1294,1296,3,336,168,0,1295,1294,1,0,0,0,1296,
        1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,0,0,
        0,1299,1297,1,0,0,0,1300,1304,3,112,56,0,1301,1303,3,336,168,0,1302,
        1301,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,
        0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1307,1293,1,0,0,0,1307,1308,
        1,0,0,0,1308,151,1,0,0,0,1309,1311,3,284,142,0,1310,1309,1,0,0,0,
        1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1316,3,226,113,0,1313,1316,
        3,332,166,0,1314,1316,5,69,0,0,1315,1310,1,0,0,0,1315,1313,1,0,0,
        0,1315,1314,1,0,0,0,1316,1317,1,0,0,0,1317,1318,3,328,164,0,1318,
        1319,3,234,117,0,1319,153,1,0,0,0,1320,1322,3,284,142,0,1321,1320,
        1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,1327,3,224,112,
        0,1324,1327,3,332,166,0,1325,1327,5,69,0,0,1326,1321,1,0,0,0,1326,
        1324,1,0,0,0,1326,1325,1,0,0,0,1327,1328,1,0,0,0,1328,1329,3,340,
        170,0,1329,1330,3,338,169,0,1330,1331,5,6,0,0,1331,1336,3,26,13,
        0,1332,1333,5,2,0,0,1333,1334,5,80,0,0,1334,1335,5,5,0,0,1335,1337,
        5,138,0,0,1336,1332,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,
        1338,1339,5,7,0,0,1339,155,1,0,0,0,1340,1342,3,284,142,0,1341,1340,
        1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,1347,3,224,112,
        0,1344,1347,3,332,166,0,1345,1347,5,69,0,0,1346,1341,1,0,0,0,1346,
        1344,1,0,0,0,1346,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1349,3,340,
        170,0,1349,1350,3,338,169,0,1350,1351,5,6,0,0,1351,1352,3,26,13,
        0,1352,1353,5,79,0,0,1353,1358,3,26,13,0,1354,1355,5,2,0,0,1355,
        1356,5,80,0,0,1356,1357,5,5,0,0,1357,1359,5,138,0,0,1358,1354,1,
        0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,7,0,0,1361,
        157,1,0,0,0,1362,1363,5,17,0,0,1363,1364,5,6,0,0,1364,1369,3,170,
        85,0,1365,1366,5,2,0,0,1366,1368,3,170,85,0,1367,1365,1,0,0,0,1368,
        1371,1,0,0,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,1372,1,0,0,
        0,1371,1369,1,0,0,0,1372,1373,5,7,0,0,1373,1376,1,0,0,0,1374,1376,
        5,17,0,0,1375,1362,1,0,0,0,1375,1374,1,0,0,0,1376,159,1,0,0,0,1377,
        1379,3,336,168,0,1378,1377,1,0,0,0,1379,1382,1,0,0,0,1380,1378,1,
        0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1380,1,0,0,0,1383,
        1387,3,162,81,0,1384,1386,3,336,168,0,1385,1384,1,0,0,0,1386,1389,
        1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1430,1,0,0,0,1389,
        1387,1,0,0,0,1390,1392,3,336,168,0,1391,1390,1,0,0,0,1392,1395,1,
        0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,
        1393,1,0,0,0,1396,1400,3,164,82,0,1397,1399,3,336,168,0,1398,1397,
        1,0,0,0,1399,1402,1,0,0,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,
        1430,1,0,0,0,1402,1400,1,0,0,0,1403,1405,3,336,168,0,1404,1403,1,
        0,0,0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,
        1409,1,0,0,0,1408,1406,1,0,0,0,1409,1413,3,170,85,0,1410,1412,3,
        336,168,0,1411,1410,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,0,0,0,
        1413,1414,1,0,0,0,1414,1430,1,0,0,0,1415,1413,1,0,0,0,1416,1418,
        3,336,168,0,1417,1416,1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,
        0,1419,1420,1,0,0,0,1420,1422,1,0,0,0,1421,1419,1,0,0,0,1422,1426,
        3,166,83,0,1423,1425,3,336,168,0,1424,1423,1,0,0,0,1425,1428,1,0,
        0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,1430,1,0,0,0,1428,1426,
        1,0,0,0,1429,1380,1,0,0,0,1429,1393,1,0,0,0,1429,1406,1,0,0,0,1429,
        1419,1,0,0,0,1430,161,1,0,0,0,1431,1432,7,1,0,0,1432,163,1,0,0,0,
        1433,1435,7,3,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,
        1,0,0,0,1436,1439,5,138,0,0,1437,1438,5,1,0,0,1438,1440,5,138,0,
        0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,165,1,0,0,0,1441,1442,
        5,130,0,0,1442,167,1,0,0,0,1443,1447,3,164,82,0,1444,1447,3,242,
        121,0,1445,1447,3,246,123,0,1446,1443,1,0,0,0,1446,1444,1,0,0,0,
        1446,1445,1,0,0,0,1447,169,1,0,0,0,1448,1449,7,10,0,0,1449,171,1,
        0,0,0,1450,1451,3,178,89,0,1451,1452,3,320,160,0,1452,1453,3,180,
        90,0,1453,173,1,0,0,0,1454,1455,3,186,93,0,1455,1456,3,318,159,0,
        1456,1457,3,188,94,0,1457,175,1,0,0,0,1458,1459,3,196,98,0,1459,
        1460,3,316,158,0,1460,1461,3,198,99,0,1461,1464,1,0,0,0,1462,1464,
        3,200,100,0,1463,1458,1,0,0,0,1463,1462,1,0,0,0,1464,177,1,0,0,0,
        1465,1466,3,182,91,0,1466,179,1,0,0,0,1467,1470,3,184,92,0,1468,
        1470,3,182,91,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,181,1,0,
        0,0,1471,1473,3,206,103,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,
        1477,1,0,0,0,1474,1478,3,256,128,0,1475,1478,3,262,131,0,1476,1478,
        3,254,127,0,1477,1474,1,0,0,0,1477,1475,1,0,0,0,1477,1476,1,0,0,
        0,1478,1480,1,0,0,0,1479,1481,3,192,96,0,1480,1479,1,0,0,0,1480,
        1481,1,0,0,0,1481,1483,1,0,0,0,1482,1484,3,208,104,0,1483,1482,1,
        0,0,0,1483,1484,1,0,0,0,1484,183,1,0,0,0,1485,1486,3,170,85,0,1486,
        185,1,0,0,0,1487,1488,3,190,95,0,1488,187,1,0,0,0,1489,1492,3,168,
        84,0,1490,1492,3,190,95,0,1491,1489,1,0,0,0,1491,1490,1,0,0,0,1492,
        189,1,0,0,0,1493,1495,3,212,106,0,1494,1493,1,0,0,0,1494,1495,1,
        0,0,0,1495,1497,1,0,0,0,1496,1498,3,284,142,0,1497,1496,1,0,0,0,
        1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,3,256,128,0,1500,1502,
        3,192,96,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,
        1503,1505,3,194,97,0,1504,1506,3,214,107,0,1505,1504,1,0,0,0,1505,
        1506,1,0,0,0,1506,191,1,0,0,0,1507,1508,5,1,0,0,1508,1510,3,286,
        143,0,1509,1507,1,0,0,0,1510,1511,1,0,0,0,1511,1509,1,0,0,0,1511,
        1512,1,0,0,0,1512,193,1,0,0,0,1513,1514,5,1,0,0,1514,1515,3,300,
        150,0,1515,195,1,0,0,0,1516,1517,3,202,101,0,1517,197,1,0,0,0,1518,
        1521,3,162,81,0,1519,1521,3,202,101,0,1520,1518,1,0,0,0,1520,1519,
        1,0,0,0,1521,199,1,0,0,0,1522,1524,5,36,0,0,1523,1522,1,0,0,0,1523,
        1524,1,0,0,0,1524,1525,1,0,0,0,1525,1526,3,202,101,0,1526,201,1,
        0,0,0,1527,1529,3,284,142,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,
        1529,1530,1,0,0,0,1530,1532,3,256,128,0,1531,1533,3,192,96,0,1532,
        1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1535,3,204,
        102,0,1535,203,1,0,0,0,1536,1537,5,1,0,0,1537,1538,3,306,153,0,1538,
        205,1,0,0,0,1539,1540,3,170,85,0,1540,1541,5,70,0,0,1541,207,1,0,
        0,0,1542,1543,5,70,0,0,1543,1544,3,170,85,0,1544,209,1,0,0,0,1545,
        1546,7,11,0,0,1546,211,1,0,0,0,1547,1548,3,164,82,0,1548,1549,3,
        210,105,0,1549,213,1,0,0,0,1550,1551,3,210,105,0,1551,1552,3,164,
        82,0,1552,215,1,0,0,0,1553,1556,3,218,109,0,1554,1556,3,220,110,
        0,1555,1553,1,0,0,0,1555,1554,1,0,0,0,1556,217,1,0,0,0,1557,1558,
        3,276,138,0,1558,1559,5,1,0,0,1559,1561,1,0,0,0,1560,1557,1,0,0,
        0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1565,
        1,0,0,0,1564,1562,1,0,0,0,1565,1566,5,118,0,0,1566,219,1,0,0,0,1567,
        1568,3,266,133,0,1568,1569,3,314,157,0,1569,221,1,0,0,0,1570,1571,
        3,284,142,0,1571,1572,3,216,108,0,1572,223,1,0,0,0,1573,1577,3,228,
        114,0,1574,1575,5,14,0,0,1575,1578,3,332,166,0,1576,1578,3,332,166,
        0,1577,1574,1,0,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,225,
        1,0,0,0,1579,1583,3,230,115,0,1580,1581,5,14,0,0,1581,1584,3,332,
        166,0,1582,1584,3,332,166,0,1583,1580,1,0,0,0,1583,1582,1,0,0,0,
        1583,1584,1,0,0,0,1584,227,1,0,0,0,1585,1590,3,276,138,0,1586,1587,
        5,1,0,0,1587,1589,3,276,138,0,1588,1586,1,0,0,0,1589,1592,1,0,0,
        0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,1606,1,0,0,0,1592,1590,
        1,0,0,0,1593,1598,3,276,138,0,1594,1595,5,1,0,0,1595,1597,3,276,
        138,0,1596,1594,1,0,0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,
        1599,1,0,0,0,1599,1601,1,0,0,0,1600,1598,1,0,0,0,1601,1602,5,1,0,
        0,1602,1603,3,232,116,0,1603,1606,1,0,0,0,1604,1606,3,232,116,0,
        1605,1585,1,0,0,0,1605,1593,1,0,0,0,1605,1604,1,0,0,0,1606,229,1,
        0,0,0,1607,1612,3,276,138,0,1608,1609,5,1,0,0,1609,1611,3,276,138,
        0,1610,1608,1,0,0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,0,1612,1613,
        1,0,0,0,1613,231,1,0,0,0,1614,1612,1,0,0,0,1615,1616,3,276,138,0,
        1616,1617,5,71,0,0,1617,1631,1,0,0,0,1618,1619,5,6,0,0,1619,1624,
        3,276,138,0,1620,1621,5,1,0,0,1621,1623,3,276,138,0,1622,1620,1,
        0,0,0,1623,1626,1,0,0,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,
        1627,1,0,0,0,1626,1624,1,0,0,0,1627,1628,5,7,0,0,1628,1629,5,71,
        0,0,1629,1631,1,0,0,0,1630,1615,1,0,0,0,1630,1618,1,0,0,0,1631,233,
        1,0,0,0,1632,1637,3,332,166,0,1633,1634,5,1,0,0,1634,1636,3,276,
        138,0,1635,1633,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,
        1638,1,0,0,0,1638,235,1,0,0,0,1639,1637,1,0,0,0,1640,1643,3,238,
        119,0,1641,1643,3,240,120,0,1642,1640,1,0,0,0,1642,1641,1,0,0,0,
        1643,237,1,0,0,0,1644,1645,3,276,138,0,1645,1646,5,1,0,0,1646,1648,
        1,0,0,0,1647,1644,1,0,0,0,1648,1651,1,0,0,0,1649,1647,1,0,0,0,1649,
        1650,1,0,0,0,1650,1652,1,0,0,0,1651,1649,1,0,0,0,1652,1653,5,120,
        0,0,1653,239,1,0,0,0,1654,1655,3,270,135,0,1655,1656,3,314,157,0,
        1656,241,1,0,0,0,1657,1658,3,284,142,0,1658,1659,3,236,118,0,1659,
        243,1,0,0,0,1660,1668,3,216,108,0,1661,1668,3,230,115,0,1662,1668,
        3,236,118,0,1663,1668,3,248,124,0,1664,1668,3,256,128,0,1665,1668,
        3,264,132,0,1666,1668,3,332,166,0,1667,1660,1,0,0,0,1667,1661,1,
        0,0,0,1667,1662,1,0,0,0,1667,1663,1,0,0,0,1667,1664,1,0,0,0,1667,
        1665,1,0,0,0,1667,1666,1,0,0,0,1668,1669,1,0,0,0,1669,1670,5,1,0,
        0,1670,1671,3,312,156,0,1671,245,1,0,0,0,1672,1673,3,284,142,0,1673,
        1674,3,244,122,0,1674,247,1,0,0,0,1675,1678,3,250,125,0,1676,1678,
        3,252,126,0,1677,1675,1,0,0,0,1677,1676,1,0,0,0,1678,249,1,0,0,0,
        1679,1680,3,276,138,0,1680,1681,5,1,0,0,1681,1683,1,0,0,0,1682,1679,
        1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,
        1687,1,0,0,0,1686,1684,1,0,0,0,1687,1688,7,12,0,0,1688,251,1,0,0,
        0,1689,1690,3,272,136,0,1690,1691,3,314,157,0,1691,253,1,0,0,0,1692,
        1693,3,284,142,0,1693,1694,3,248,124,0,1694,255,1,0,0,0,1695,1698,
        3,258,129,0,1696,1698,3,260,130,0,1697,1695,1,0,0,0,1697,1696,1,
        0,0,0,1698,257,1,0,0,0,1699,1700,3,276,138,0,1700,1701,5,1,0,0,1701,
        1703,1,0,0,0,1702,1699,1,0,0,0,1703,1706,1,0,0,0,1704,1702,1,0,0,
        0,1704,1705,1,0,0,0,1705,1707,1,0,0,0,1706,1704,1,0,0,0,1707,1708,
        5,121,0,0,1708,259,1,0,0,0,1709,1710,3,274,137,0,1710,1711,3,314,
        157,0,1711,261,1,0,0,0,1712,1713,3,284,142,0,1713,1714,3,256,128,
        0,1714,263,1,0,0,0,1715,1721,3,266,133,0,1716,1721,3,268,134,0,1717,
        1721,3,270,135,0,1718,1721,3,272,136,0,1719,1721,3,274,137,0,1720,
        1715,1,0,0,0,1720,1716,1,0,0,0,1720,1717,1,0,0,0,1720,1718,1,0,0,
        0,1720,1719,1,0,0,0,1721,265,1,0,0,0,1722,1723,3,276,138,0,1723,
        1724,5,1,0,0,1724,1726,1,0,0,0,1725,1722,1,0,0,0,1726,1729,1,0,0,
        0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,1730,1,0,0,0,1729,1727,
        1,0,0,0,1730,1731,5,124,0,0,1731,267,1,0,0,0,1732,1733,3,276,138,
        0,1733,1734,5,1,0,0,1734,1736,1,0,0,0,1735,1732,1,0,0,0,1736,1739,
        1,0,0,0,1737,1735,1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,0,0,1739,
        1737,1,0,0,0,1740,1741,5,126,0,0,1741,269,1,0,0,0,1742,1743,3,276,
        138,0,1743,1744,5,1,0,0,1744,1746,1,0,0,0,1745,1742,1,0,0,0,1746,
        1749,1,0,0,0,1747,1745,1,0,0,0,1747,1748,1,0,0,0,1748,1750,1,0,0,
        0,1749,1747,1,0,0,0,1750,1751,5,125,0,0,1751,271,1,0,0,0,1752,1753,
        3,276,138,0,1753,1754,5,1,0,0,1754,1756,1,0,0,0,1755,1752,1,0,0,
        0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1760,
        1,0,0,0,1759,1757,1,0,0,0,1760,1761,5,127,0,0,1761,273,1,0,0,0,1762,
        1763,3,276,138,0,1763,1764,5,1,0,0,1764,1766,1,0,0,0,1765,1762,1,
        0,0,0,1766,1769,1,0,0,0,1767,1765,1,0,0,0,1767,1768,1,0,0,0,1768,
        1770,1,0,0,0,1769,1767,1,0,0,0,1770,1771,5,128,0,0,1771,275,1,0,
        0,0,1772,1776,3,278,139,0,1773,1776,3,280,140,0,1774,1776,3,282,
        141,0,1775,1772,1,0,0,0,1775,1773,1,0,0,0,1775,1774,1,0,0,0,1776,
        277,1,0,0,0,1777,1778,5,126,0,0,1778,1779,3,314,157,0,1779,279,1,
        0,0,0,1780,1781,5,126,0,0,1781,281,1,0,0,0,1782,1783,5,119,0,0,1783,
        283,1,0,0,0,1784,1785,3,332,166,0,1785,1786,5,1,0,0,1786,285,1,0,
        0,0,1787,1788,3,288,144,0,1788,1789,5,6,0,0,1789,1790,5,7,0,0,1790,
        1823,1,0,0,0,1791,1792,3,290,145,0,1792,1793,5,6,0,0,1793,1794,3,
        310,155,0,1794,1795,5,7,0,0,1795,1823,1,0,0,0,1796,1797,3,292,146,
        0,1797,1798,5,6,0,0,1798,1799,3,310,155,0,1799,1800,5,2,0,0,1800,
        1801,3,310,155,0,1801,1802,5,7,0,0,1802,1823,1,0,0,0,1803,1804,3,
        294,147,0,1804,1805,5,6,0,0,1805,1806,3,170,85,0,1806,1807,5,7,0,
        0,1807,1823,1,0,0,0,1808,1809,3,296,148,0,1809,1810,5,6,0,0,1810,
        1811,3,170,85,0,1811,1812,5,2,0,0,1812,1813,3,170,85,0,1813,1814,
        5,7,0,0,1814,1823,1,0,0,0,1815,1816,3,298,149,0,1816,1817,5,6,0,
        0,1817,1818,3,170,85,0,1818,1819,5,2,0,0,1819,1820,3,310,155,0,1820,
        1821,5,7,0,0,1821,1823,1,0,0,0,1822,1787,1,0,0,0,1822,1791,1,0,0,
        0,1822,1796,1,0,0,0,1822,1803,1,0,0,0,1822,1808,1,0,0,0,1822,1815,
        1,0,0,0,1823,287,1,0,0,0,1824,1825,7,13,0,0,1825,289,1,0,0,0,1826,
        1827,5,44,0,0,1827,291,1,0,0,0,1828,1829,5,44,0,0,1829,293,1,0,0,
        0,1830,1831,5,48,0,0,1831,295,1,0,0,0,1832,1833,5,45,0,0,1833,297,
        1,0,0,0,1834,1835,5,46,0,0,1835,299,1,0,0,0,1836,1837,3,302,151,
        0,1837,1838,5,6,0,0,1838,1839,5,7,0,0,1839,1846,1,0,0,0,1840,1841,
        3,304,152,0,1841,1842,5,6,0,0,1842,1843,3,170,85,0,1843,1844,5,7,
        0,0,1844,1846,1,0,0,0,1845,1836,1,0,0,0,1845,1840,1,0,0,0,1846,301,
        1,0,0,0,1847,1848,5,49,0,0,1848,303,1,0,0,0,1849,1850,5,50,0,0,1850,
        305,1,0,0,0,1851,1852,3,308,154,0,1852,1853,5,6,0,0,1853,1854,5,
        7,0,0,1854,307,1,0,0,0,1855,1856,7,14,0,0,1856,309,1,0,0,0,1857,
        1861,5,138,0,0,1858,1859,5,72,0,0,1859,1861,5,138,0,0,1860,1857,
        1,0,0,0,1860,1858,1,0,0,0,1861,311,1,0,0,0,1862,1863,5,37,0,0,1863,
        313,1,0,0,0,1864,1865,5,8,0,0,1865,1866,5,138,0,0,1866,1867,5,9,
        0,0,1867,315,1,0,0,0,1868,1869,7,15,0,0,1869,317,1,0,0,0,1870,1871,
        7,16,0,0,1871,319,1,0,0,0,1872,1873,7,17,0,0,1873,321,1,0,0,0,1874,
        1875,7,18,0,0,1875,323,1,0,0,0,1876,1877,7,19,0,0,1877,325,1,0,0,
        0,1878,1879,7,15,0,0,1879,327,1,0,0,0,1880,1881,7,20,0,0,1881,329,
        1,0,0,0,1882,1887,7,9,0,0,1883,1884,5,1,0,0,1884,1886,5,119,0,0,
        1885,1883,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,0,0,0,1887,1888,
        1,0,0,0,1888,1892,1,0,0,0,1889,1887,1,0,0,0,1890,1891,5,1,0,0,1891,
        1893,3,268,134,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,1897,1,
        0,0,0,1894,1895,5,14,0,0,1895,1898,3,332,166,0,1896,1898,3,332,166,
        0,1897,1894,1,0,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,331,
        1,0,0,0,1899,1900,5,134,0,0,1900,333,1,0,0,0,1901,1902,5,134,0,0,
        1902,335,1,0,0,0,1903,1904,7,21,0,0,1904,337,1,0,0,0,1905,1906,7,
        22,0,0,1906,339,1,0,0,0,1907,1908,7,18,0,0,1908,341,1,0,0,0,208,
        345,349,354,358,363,366,371,378,384,391,394,396,410,417,427,434,
        441,448,453,462,469,475,484,493,497,500,503,506,510,513,516,520,
        523,529,532,537,543,550,556,564,571,574,579,586,594,599,612,617,
        624,631,637,644,647,652,659,665,672,675,680,688,695,701,708,711,
        722,728,753,760,783,804,809,828,831,841,846,849,853,860,872,878,
        884,890,903,920,926,971,979,986,994,1006,1011,1015,1023,1028,1035,
        1048,1055,1062,1069,1074,1083,1090,1096,1100,1119,1122,1128,1131,
        1136,1139,1142,1149,1156,1160,1168,1171,1182,1185,1189,1192,1205,
        1207,1212,1215,1222,1229,1233,1241,1248,1252,1259,1266,1273,1278,
        1284,1289,1297,1304,1307,1310,1315,1321,1326,1336,1341,1346,1358,
        1369,1375,1380,1387,1393,1400,1406,1413,1419,1426,1429,1434,1439,
        1446,1463,1469,1472,1477,1480,1483,1491,1494,1497,1501,1505,1511,
        1520,1523,1528,1532,1555,1562,1577,1583,1590,1598,1605,1612,1624,
        1630,1637,1642,1649,1667,1677,1684,1697,1704,1720,1727,1737,1747,
        1757,1767,1775,1822,1845,1860,1887,1892,1897
    ]

class DslParser ( Parser ):

    grammarFileName = "DslParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "','", "':'", "';'", "'='", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "<INVALID>", "'remove'", 
                     "'as'", "'true'", "'false'", "'validFunction'", "'>'", 
                     "'>='", "'<'", "'<='", "'=='", "'!='", "'contain'", 
                     "'notContain'", "'match'", "'notMatch'", "'startWith'", 
                     "'notStartWith'", "'endWith'", "'notEndWith'", "'in'", 
                     "'notIn'", "'is'", "'isnot'", "'!'", "<INVALID>", "'or'", 
                     "'and'", "'not'", "'toUpperCase'", "'toLowerCase'", 
                     "'capitalize'", "'substring'", "'replaceAll'", "'splitAndGet'", 
                     "'shortName'", "'trim'", "'len'", "'indexOf'", "'isLowerCase'", 
                     "'isUpperCase'", "'@ConfigRule'", "'PreciseMatch'", 
                     "'Properties'", "'XpathMatchExpr'", "'FileName'", "<INVALID>", 
                     "<INVALID>", "'@Source'", "'@Sink'", "'@Passthrough'", 
                     "'@Cleanse'", "'@path'", "'InArgs'", "'OutArgs'", "'TaintFlags'", 
                     "'return'", "'this'", "'+'", "'*'", "'-'", "'/'", "'$'", 
                     "'prevDfg'", "'nextDfg'", "'prevCfg'", "'nextCfg'", 
                     "'until'", "'depth'", "'@RuleSetMessage'", "<INVALID>", 
                     "'Version'", "<INVALID>", "'Language'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'C'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'Type'", "'Taint'", "'Structural'", "'Engine'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'CustomInfo'", "'@RuleMsg'", "'RuleId'", "'@Vulnerability'", 
                     "'Category'", "'Subcategory'", "'IssueType'", "'CWE'", 
                     "'Severity'", "'Suggest'", "'Normal'", "'Critical'", 
                     "'Fatal'", "'Error'", "'Warning'", "'@import'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'value'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'modifiers'", "'alarmPoint'", "'null'" ]

    symbolicNames = [ "<INVALID>", "Point", "Comma", "Colon", "Semicolon", 
                      "Equal", "LeftBracket", "RightBracket", "LeftMidBracket", 
                      "RightMidBracket", "LeftCurlyBracket", "RightCurlyBracket", 
                      "Satisfy", "Remove", "As", "True", "False", "Condition", 
                      "Gt", "Gte", "Lt", "Lte", "Eq", "Neq", "Contain", 
                      "NotContain", "Match", "NotMatch", "StartWith", "NotStartWith", 
                      "EndWith", "NotEndWith", "In", "NotIn", "Is", "IsNot", 
                      "BooleanNot", "Size", "OR", "AND", "NOT", "ToUpperCase", 
                      "ToLowerCase", "Capitalize", "Substring", "ReplaceAll", 
                      "SplitAndGet", "ShortName", "Trim", "Len", "IndexOf", 
                      "IsLowercase", "IsUppercase", "ConfigLabel", "PreciseMatch", 
                      "Properties", "XpathMatchExpression", "FileName", 
                      "PropertyKey", "PropertyValue", "SourceLabel", "SinkLabel", 
                      "PassthroughLabel", "CleanseLabel", "Path", "InArgs", 
                      "OutArgs", "Flag", "Return", "This", "Plus", "Star", 
                      "Minus", "Divide", "Dollar", "PrevDfg", "NextDfg", 
                      "PrevCfg", "NextCfg", "Until", "Depth", "RuleSetMessageLabel", 
                      "RuleSetName", "Version", "ReportMsg", "Language", 
                      "Java", "Python", "CPP", "C", "ArkTs", "TypeScript", 
                      "JavaScript", "Type", "Taint", "Structural", "Engine", 
                      "Cooddy", "CSA", "Soot", "Cpg", "CustomInfo", "RuleMsgLabel", 
                      "RuleId", "VulnerabilityLabel", "Category", "Subcategory", 
                      "IssueType", "CWE", "Severity", "Suggest", "Normal", 
                      "Critical", "Fatal", "Error", "Warning", "ImportLabel", 
                      "Node", "BoolAttr", "NodeAttr", "NumAttr", "StrAttr", 
                      "ObjPropertyAttr", "ObjNodeAttr", "CollectionBoolAttr", 
                      "CollectionNumAttr", "CollectionNodeAttr", "CollectionObjAttr", 
                      "CollectionStrAttr", "WarningNode", "NULL", "WS", 
                      "MultiLineComment", "OneLineComment", "ALIAS", "STRING", 
                      "ID", "CommonChar", "INT", "ChineseWords" ]

    RULE_statements = 0
    RULE_removeOperation = 1
    RULE_repeatOperation = 2
    RULE_existOperation = 3
    RULE_existCondition = 4
    RULE_singleCondition = 5
    RULE_stepList = 6
    RULE_nodeStmt = 7
    RULE_queryStmt = 8
    RULE_nodeQueryExpr = 9
    RULE_nodePathStmt = 10
    RULE_singleNodeQueryExpr = 11
    RULE_singleNodeAttrQueryExpr = 12
    RULE_containedDesc = 13
    RULE_configInfo = 14
    RULE_configStmt = 15
    RULE_preciseMatch = 16
    RULE_fileNameAttr = 17
    RULE_xPathAttr = 18
    RULE_keyValueAttr = 19
    RULE_taintInfo = 20
    RULE_taintSource = 21
    RULE_taintSink = 22
    RULE_taintPassthrough = 23
    RULE_taintCleanse = 24
    RULE_inArgs = 25
    RULE_outArgs = 26
    RULE_taintList = 27
    RULE_taint = 28
    RULE_symbolFlagInfo = 29
    RULE_flagList = 30
    RULE_flag = 31
    RULE_flagOperator = 32
    RULE_ruleSetMessage = 33
    RULE_ruleSetName = 34
    RULE_language = 35
    RULE_ruleSetType = 36
    RULE_engine = 37
    RULE_version = 38
    RULE_descriptionMsg = 39
    RULE_customInfo = 40
    RULE_keyValuePair = 41
    RULE_vulnerability = 42
    RULE_category = 43
    RULE_subCategory = 44
    RULE_issueType = 45
    RULE_cwe = 46
    RULE_severity = 47
    RULE_severityLabel = 48
    RULE_ruleMsg = 49
    RULE_description = 50
    RULE_ruleId = 51
    RULE_reportExpr = 52
    RULE_parameterizedWarningInfo = 53
    RULE_valueAttr = 54
    RULE_imprt = 55
    RULE_condExpr = 56
    RULE_condition = 57
    RULE_directCondition = 58
    RULE_boolCondition = 59
    RULE_nodeCondition = 60
    RULE_nodeNullCondition = 61
    RULE_numCondition = 62
    RULE_originalNumCondition = 63
    RULE_numCalCondition = 64
    RULE_numLeftExpr = 65
    RULE_objCondition = 66
    RULE_strCondition = 67
    RULE_boolCollectionCondition = 68
    RULE_objCollectionCondition = 69
    RULE_nodeCollectionCondition = 70
    RULE_numCollectionCondition = 71
    RULE_strCollectionCondition = 72
    RULE_groupCondition = 73
    RULE_hasCondition = 74
    RULE_isCondition = 75
    RULE_isAliasCondition = 76
    RULE_dfgCondition = 77
    RULE_dfgPathCondition = 78
    RULE_encapsulateCondition = 79
    RULE_objExpr = 80
    RULE_boolExpr = 81
    RULE_numExpr = 82
    RULE_nullExpr = 83
    RULE_numRightExpr = 84
    RULE_strExpr = 85
    RULE_strConditionEndInStr = 86
    RULE_strConditionEndInNum = 87
    RULE_strConditionEndInBool = 88
    RULE_leftStrOperandEndInStr = 89
    RULE_rightStrOperandEndInStr = 90
    RULE_strVariableEndInStr = 91
    RULE_strConstant = 92
    RULE_leftStrOperandEndInNum = 93
    RULE_rightStrOperandEndInNum = 94
    RULE_strVariableEndInNum = 95
    RULE_strInvokeStrChain = 96
    RULE_strInvokeIntExpr = 97
    RULE_leftStrOperandEndInBool = 98
    RULE_rightStrOperandEndInBool = 99
    RULE_singleStrOperandEndInBool = 100
    RULE_strVariableEndInBool = 101
    RULE_strInvokeBoolExpr = 102
    RULE_prefixStrConst = 103
    RULE_suffixStrConst = 104
    RULE_utilityOperator = 105
    RULE_prefixIntConst = 106
    RULE_suffixIntConst = 107
    RULE_boolAttr = 108
    RULE_normalBoolAttr = 109
    RULE_indexBoolAttr = 110
    RULE_aliasBoolAttr = 111
    RULE_nodeAttrWithAlias = 112
    RULE_nonRecursiveNodeAttrWithAlias = 113
    RULE_nodeAttr = 114
    RULE_nonRecursiveNodeAttr = 115
    RULE_recursiveNodeAttr = 116
    RULE_aliasNodeAttr = 117
    RULE_numAttr = 118
    RULE_normalNumAttr = 119
    RULE_indexNumAttr = 120
    RULE_aliasNumAttr = 121
    RULE_groupAttr = 122
    RULE_aliasGroupAttr = 123
    RULE_objAttr = 124
    RULE_normalObjAttr = 125
    RULE_indexObjAttr = 126
    RULE_aliasObjAttr = 127
    RULE_strAttr = 128
    RULE_normalStrAttr = 129
    RULE_indexStrAttr = 130
    RULE_aliasStrAttr = 131
    RULE_collectionAttr = 132
    RULE_collectionBoolAttr = 133
    RULE_collectionNodeAttr = 134
    RULE_collectionNumAttr = 135
    RULE_collectionObjAttr = 136
    RULE_collectionStrAttr = 137
    RULE_singleNodeAttr = 138
    RULE_compositeSingleNodeAttr = 139
    RULE_collectionSingleNodeAttr = 140
    RULE_simpleSingleNodeAttr = 141
    RULE_aliasHead = 142
    RULE_strUtilityStr = 143
    RULE_strUtilityStrNameWithoutParam = 144
    RULE_strUtilityStrNameWithSingleIntParam = 145
    RULE_strUtilityStrNameWithDoubleIntParam = 146
    RULE_strUtilityStrNameWithSingleStringParam = 147
    RULE_strUtilityStrNameWithDoubleStringParam = 148
    RULE_strUtilityStrNameWithSingleStringParamAndSingleIntParam = 149
    RULE_strUtilityInt = 150
    RULE_strUtilityIntNameWithoutParam = 151
    RULE_strUtilityIntNameWithSingleStringParam = 152
    RULE_strUtilityBool = 153
    RULE_strUtiltiyBoolNameWithoutParam = 154
    RULE_allInt = 155
    RULE_size = 156
    RULE_index = 157
    RULE_boolOperator = 158
    RULE_numOperator = 159
    RULE_strOperator = 160
    RULE_collectionOperator = 161
    RULE_hasOperator = 162
    RULE_nullOperator = 163
    RULE_isOperator = 164
    RULE_rootNodeAttr = 165
    RULE_alias = 166
    RULE_stepName = 167
    RULE_comment = 168
    RULE_direction = 169
    RULE_presence = 170

    ruleNames =  [ "statements", "removeOperation", "repeatOperation", "existOperation", 
                   "existCondition", "singleCondition", "stepList", "nodeStmt", 
                   "queryStmt", "nodeQueryExpr", "nodePathStmt", "singleNodeQueryExpr", 
                   "singleNodeAttrQueryExpr", "containedDesc", "configInfo", 
                   "configStmt", "preciseMatch", "fileNameAttr", "xPathAttr", 
                   "keyValueAttr", "taintInfo", "taintSource", "taintSink", 
                   "taintPassthrough", "taintCleanse", "inArgs", "outArgs", 
                   "taintList", "taint", "symbolFlagInfo", "flagList", "flag", 
                   "flagOperator", "ruleSetMessage", "ruleSetName", "language", 
                   "ruleSetType", "engine", "version", "descriptionMsg", 
                   "customInfo", "keyValuePair", "vulnerability", "category", 
                   "subCategory", "issueType", "cwe", "severity", "severityLabel", 
                   "ruleMsg", "description", "ruleId", "reportExpr", "parameterizedWarningInfo", 
                   "valueAttr", "imprt", "condExpr", "condition", "directCondition", 
                   "boolCondition", "nodeCondition", "nodeNullCondition", 
                   "numCondition", "originalNumCondition", "numCalCondition", 
                   "numLeftExpr", "objCondition", "strCondition", "boolCollectionCondition", 
                   "objCollectionCondition", "nodeCollectionCondition", 
                   "numCollectionCondition", "strCollectionCondition", "groupCondition", 
                   "hasCondition", "isCondition", "isAliasCondition", "dfgCondition", 
                   "dfgPathCondition", "encapsulateCondition", "objExpr", 
                   "boolExpr", "numExpr", "nullExpr", "numRightExpr", "strExpr", 
                   "strConditionEndInStr", "strConditionEndInNum", "strConditionEndInBool", 
                   "leftStrOperandEndInStr", "rightStrOperandEndInStr", 
                   "strVariableEndInStr", "strConstant", "leftStrOperandEndInNum", 
                   "rightStrOperandEndInNum", "strVariableEndInNum", "strInvokeStrChain", 
                   "strInvokeIntExpr", "leftStrOperandEndInBool", "rightStrOperandEndInBool", 
                   "singleStrOperandEndInBool", "strVariableEndInBool", 
                   "strInvokeBoolExpr", "prefixStrConst", "suffixStrConst", 
                   "utilityOperator", "prefixIntConst", "suffixIntConst", 
                   "boolAttr", "normalBoolAttr", "indexBoolAttr", "aliasBoolAttr", 
                   "nodeAttrWithAlias", "nonRecursiveNodeAttrWithAlias", 
                   "nodeAttr", "nonRecursiveNodeAttr", "recursiveNodeAttr", 
                   "aliasNodeAttr", "numAttr", "normalNumAttr", "indexNumAttr", 
                   "aliasNumAttr", "groupAttr", "aliasGroupAttr", "objAttr", 
                   "normalObjAttr", "indexObjAttr", "aliasObjAttr", "strAttr", 
                   "normalStrAttr", "indexStrAttr", "aliasStrAttr", "collectionAttr", 
                   "collectionBoolAttr", "collectionNodeAttr", "collectionNumAttr", 
                   "collectionObjAttr", "collectionStrAttr", "singleNodeAttr", 
                   "compositeSingleNodeAttr", "collectionSingleNodeAttr", 
                   "simpleSingleNodeAttr", "aliasHead", "strUtilityStr", 
                   "strUtilityStrNameWithoutParam", "strUtilityStrNameWithSingleIntParam", 
                   "strUtilityStrNameWithDoubleIntParam", "strUtilityStrNameWithSingleStringParam", 
                   "strUtilityStrNameWithDoubleStringParam", "strUtilityStrNameWithSingleStringParamAndSingleIntParam", 
                   "strUtilityInt", "strUtilityIntNameWithoutParam", "strUtilityIntNameWithSingleStringParam", 
                   "strUtilityBool", "strUtiltiyBoolNameWithoutParam", "allInt", 
                   "size", "index", "boolOperator", "numOperator", "strOperator", 
                   "collectionOperator", "hasOperator", "nullOperator", 
                   "isOperator", "rootNodeAttr", "alias", "stepName", "comment", 
                   "direction", "presence" ]

    EOF = Token.EOF
    Point=1
    Comma=2
    Colon=3
    Semicolon=4
    Equal=5
    LeftBracket=6
    RightBracket=7
    LeftMidBracket=8
    RightMidBracket=9
    LeftCurlyBracket=10
    RightCurlyBracket=11
    Satisfy=12
    Remove=13
    As=14
    True_=15
    False_=16
    Condition=17
    Gt=18
    Gte=19
    Lt=20
    Lte=21
    Eq=22
    Neq=23
    Contain=24
    NotContain=25
    Match=26
    NotMatch=27
    StartWith=28
    NotStartWith=29
    EndWith=30
    NotEndWith=31
    In=32
    NotIn=33
    Is=34
    IsNot=35
    BooleanNot=36
    Size=37
    OR=38
    AND=39
    NOT=40
    ToUpperCase=41
    ToLowerCase=42
    Capitalize=43
    Substring=44
    ReplaceAll=45
    SplitAndGet=46
    ShortName=47
    Trim=48
    Len=49
    IndexOf=50
    IsLowercase=51
    IsUppercase=52
    ConfigLabel=53
    PreciseMatch=54
    Properties=55
    XpathMatchExpression=56
    FileName=57
    PropertyKey=58
    PropertyValue=59
    SourceLabel=60
    SinkLabel=61
    PassthroughLabel=62
    CleanseLabel=63
    Path=64
    InArgs=65
    OutArgs=66
    Flag=67
    Return=68
    This=69
    Plus=70
    Star=71
    Minus=72
    Divide=73
    Dollar=74
    PrevDfg=75
    NextDfg=76
    PrevCfg=77
    NextCfg=78
    Until=79
    Depth=80
    RuleSetMessageLabel=81
    RuleSetName=82
    Version=83
    ReportMsg=84
    Language=85
    Java=86
    Python=87
    CPP=88
    C=89
    ArkTs=90
    TypeScript=91
    JavaScript=92
    Type=93
    Taint=94
    Structural=95
    Engine=96
    Cooddy=97
    CSA=98
    Soot=99
    Cpg=100
    CustomInfo=101
    RuleMsgLabel=102
    RuleId=103
    VulnerabilityLabel=104
    Category=105
    Subcategory=106
    IssueType=107
    CWE=108
    Severity=109
    Suggest=110
    Normal=111
    Critical=112
    Fatal=113
    Error=114
    Warning=115
    ImportLabel=116
    Node=117
    BoolAttr=118
    NodeAttr=119
    NumAttr=120
    StrAttr=121
    ObjPropertyAttr=122
    ObjNodeAttr=123
    CollectionBoolAttr=124
    CollectionNumAttr=125
    CollectionNodeAttr=126
    CollectionObjAttr=127
    CollectionStrAttr=128
    WarningNode=129
    NULL=130
    WS=131
    MultiLineComment=132
    OneLineComment=133
    ALIAS=134
    STRING=135
    ID=136
    CommonChar=137
    INT=138
    ChineseWords=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def imprt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ImprtContext)
            else:
                return self.getTypedRuleContext(DslParser.ImprtContext,i)


        def ruleSetMessage(self):
            return self.getTypedRuleContext(DslParser.RuleSetMessageContext,0)


        def nodeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.NodeStmtContext)
            else:
                return self.getTypedRuleContext(DslParser.NodeStmtContext,i)


        def removeOperation(self):
            return self.getTypedRuleContext(DslParser.RemoveOperationContext,0)


        def nodePathStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.NodePathStmtContext)
            else:
                return self.getTypedRuleContext(DslParser.NodePathStmtContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = DslParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 342
                        self.imprt() 
                    self.state = 347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 348
                    self.ruleSetMessage()


                self.state = 354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 351
                        self.nodeStmt() 
                    self.state = 356
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==132 or _la==133:
                    self.state = 357
                    self.removeOperation()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 98305) != 0):
                    self.state = 360
                    self.nodePathStmt()
                    self.state = 365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def repeatOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.RepeatOperationContext)
            else:
                return self.getTypedRuleContext(DslParser.RepeatOperationContext,i)


        def existOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ExistOperationContext)
            else:
                return self.getTypedRuleContext(DslParser.ExistOperationContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_removeOperation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemoveOperation" ):
                return visitor.visitRemoveOperation(self)
            else:
                return visitor.visitChildren(self)




    def removeOperation(self):

        localctx = DslParser.RemoveOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_removeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 368
                        self.comment()
                        self.state = 373
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 374
                    self.repeatOperation()
                    self.state = 378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 375
                            self.comment() 
                        self.state = 380
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 381
                        self.comment()
                        self.state = 386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 387
                    self.existOperation()
                    self.state = 391
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 388
                            self.comment() 
                        self.state = 393
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                    pass


                self.state = 396 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==13 or _la==132 or _la==133):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Remove(self):
            return self.getToken(DslParser.Remove, 0)

        def stepList(self):
            return self.getTypedRuleContext(DslParser.StepListContext,0)


        def In(self):
            return self.getToken(DslParser.In, 0)

        def stepName(self):
            return self.getTypedRuleContext(DslParser.StepNameContext,0)


        def Semicolon(self):
            return self.getToken(DslParser.Semicolon, 0)

        def getRuleIndex(self):
            return DslParser.RULE_repeatOperation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatOperation" ):
                return visitor.visitRepeatOperation(self)
            else:
                return visitor.visitChildren(self)




    def repeatOperation(self):

        localctx = DslParser.RepeatOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_repeatOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(DslParser.Remove)
            self.state = 399
            self.stepList()
            self.state = 400
            self.match(DslParser.In)
            self.state = 401
            self.stepName()
            self.state = 402
            self.match(DslParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Remove(self):
            return self.getToken(DslParser.Remove, 0)

        def stepList(self):
            return self.getTypedRuleContext(DslParser.StepListContext,0)


        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def existCondition(self):
            return self.getTypedRuleContext(DslParser.ExistConditionContext,0)


        def Semicolon(self):
            return self.getToken(DslParser.Semicolon, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_existOperation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistOperation" ):
                return visitor.visitExistOperation(self)
            else:
                return visitor.visitChildren(self)




    def existOperation(self):

        localctx = DslParser.ExistOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_existOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(DslParser.Remove)
            self.state = 405
            self.stepList()
            self.state = 406
            self.match(DslParser.Satisfy)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 407
                self.comment()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 413
            self.existCondition()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 414
                self.comment()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(DslParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def existCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ExistConditionContext)
            else:
                return self.getTypedRuleContext(DslParser.ExistConditionContext,i)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def AND(self):
            return self.getToken(DslParser.AND, 0)

        def OR(self):
            return self.getToken(DslParser.OR, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def NOT(self):
            return self.getToken(DslParser.NOT, 0)

        def singleCondition(self):
            return self.getTypedRuleContext(DslParser.SingleConditionContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_existCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistCondition" ):
                return visitor.visitExistCondition(self)
            else:
                return visitor.visitChildren(self)




    def existCondition(self):

        localctx = DslParser.ExistConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_existCondition)
        self._la = 0 # Token type
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                _la = self._input.LA(1)
                if not(_la==38 or _la==39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 423
                self.match(DslParser.LeftBracket)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 424
                    self.comment()
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 430
                self.existCondition()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 431
                    self.comment()
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 451 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 437
                    self.match(DslParser.Comma)
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 438
                        self.comment()
                        self.state = 443
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 444
                    self.existCondition()
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 445
                        self.comment()
                        self.state = 450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 453 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 455
                self.match(DslParser.RightBracket)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(DslParser.NOT)
                self.state = 458
                self.match(DslParser.LeftBracket)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 459
                    self.comment()
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self.existCondition()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 466
                    self.comment()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self.match(DslParser.RightBracket)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.singleCondition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stepName(self):
            return self.getTypedRuleContext(DslParser.StepNameContext,0)


        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def Size(self):
            return self.getToken(DslParser.Size, 0)

        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_singleCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleCondition" ):
                return visitor.visitSingleCondition(self)
            else:
                return visitor.visitChildren(self)




    def singleCondition(self):

        localctx = DslParser.SingleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleCondition)
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.stepName()
                self.state = 478
                self.match(DslParser.Point)
                self.state = 479
                self.match(DslParser.Size)
                self.state = 480
                self.numOperator()
                self.state = 481
                self.numExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.stepName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stepName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StepNameContext)
            else:
                return self.getTypedRuleContext(DslParser.StepNameContext,i)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def getRuleIndex(self):
            return DslParser.RULE_stepList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepList" ):
                return visitor.visitStepList(self)
            else:
                return visitor.visitChildren(self)




    def stepList(self):

        localctx = DslParser.StepListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_stepList)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.stepName()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(DslParser.LeftBracket)
                self.state = 488
                self.stepName()
                self.state = 491 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 489
                    self.match(DslParser.Comma)
                    self.state = 490
                    self.stepName()
                    self.state = 493 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 495
                self.match(DslParser.RightBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStmt(self):
            return self.getTypedRuleContext(DslParser.QueryStmtContext,0)


        def ruleMsg(self):
            return self.getTypedRuleContext(DslParser.RuleMsgContext,0)


        def taintInfo(self):
            return self.getTypedRuleContext(DslParser.TaintInfoContext,0)


        def vulnerability(self):
            return self.getTypedRuleContext(DslParser.VulnerabilityContext,0)


        def configInfo(self):
            return self.getTypedRuleContext(DslParser.ConfigInfoContext,0)


        def configStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ConfigStmtContext)
            else:
                return self.getTypedRuleContext(DslParser.ConfigStmtContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_nodeStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeStmt" ):
                return visitor.visitNodeStmt(self)
            else:
                return visitor.visitChildren(self)




    def nodeStmt(self):

        localctx = DslParser.NodeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_nodeStmt)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.ruleMsg()


                self.state = 503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self.taintInfo()


                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 505
                    self.vulnerability()


                self.state = 508
                self.queryStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 509
                    self.taintInfo()


                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.ruleMsg()


                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 515
                    self.vulnerability()


                self.state = 518
                self.queryStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 3221225473) != 0):
                    self.state = 519
                    self.ruleMsg()


                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 522
                    self.vulnerability()


                self.state = 525
                self.configInfo()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==55:
                    self.state = 526
                    self.configStmt()
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeQueryExpr(self):
            return self.getTypedRuleContext(DslParser.NodeQueryExprContext,0)


        def Semicolon(self):
            return self.getToken(DslParser.Semicolon, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def stepName(self):
            return self.getTypedRuleContext(DslParser.StepNameContext,0)


        def Colon(self):
            return self.getToken(DslParser.Colon, 0)

        def getRuleIndex(self):
            return DslParser.RULE_queryStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStmt" ):
                return visitor.visitQueryStmt(self)
            else:
                return visitor.visitChildren(self)




    def queryStmt(self):

        localctx = DslParser.QueryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_queryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 534
                    self.comment() 
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 540
                self.stepName()
                self.state = 541
                self.match(DslParser.Colon)


            self.state = 545
            self.nodeQueryExpr()
            self.state = 546
            self.match(DslParser.Semicolon)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.comment() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeQueryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rootNodeAttr(self):
            return self.getTypedRuleContext(DslParser.RootNodeAttrContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nodeQueryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeQueryExpr" ):
                return visitor.visitNodeQueryExpr(self)
            else:
                return visitor.visitChildren(self)




    def nodeQueryExpr(self):

        localctx = DslParser.NodeQueryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_nodeQueryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 553
                self.comment()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 559
            self.rootNodeAttr()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 560
                self.match(DslParser.Satisfy)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 561
                    self.comment()
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 567
                self.condExpr()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 568
                    self.comment()
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodePathStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleNodeQueryExpr(self):
            return self.getTypedRuleContext(DslParser.SingleNodeQueryExprContext,0)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def Path(self):
            return self.getToken(DslParser.Path, 0)

        def Semicolon(self):
            return self.getToken(DslParser.Semicolon, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.AliasContext)
            else:
                return self.getTypedRuleContext(DslParser.AliasContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def singleNodeAttrQueryExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrQueryExprContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrQueryExprContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def getRuleIndex(self):
            return DslParser.RULE_nodePathStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodePathStmt" ):
                return visitor.visitNodePathStmt(self)
            else:
                return visitor.visitChildren(self)




    def nodePathStmt(self):

        localctx = DslParser.NodePathStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_nodePathStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 576
                    self.comment() 
                self.state = 581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 582
            self.singleNodeQueryExpr()
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 583
                self.comment()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 589
                    self.match(DslParser.Point)
                    self.state = 590
                    self.singleNodeAttrQueryExpr()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 591
                        self.comment()
                        self.state = 596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 602
            self.match(DslParser.Point)
            self.state = 603
            self.match(DslParser.Path)
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 604
                self.match(DslParser.LeftBracket)
                self.state = 605
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 2:
                self.state = 606
                self.match(DslParser.LeftBracket)
                self.state = 607
                self.alias()
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 608
                    self.match(DslParser.Comma)
                    self.state = 609
                    self.alias()
                    self.state = 614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 615
                self.match(DslParser.RightBracket)
                pass


            self.state = 619
            self.match(DslParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleNodeQueryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Node(self):
            return self.getToken(DslParser.Node, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def As(self):
            return self.getToken(DslParser.As, 0)

        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_singleNodeQueryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleNodeQueryExpr" ):
                return visitor.visitSingleNodeQueryExpr(self)
            else:
                return visitor.visitChildren(self)




    def singleNodeQueryExpr(self):

        localctx = DslParser.SingleNodeQueryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_singleNodeQueryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 621
                self.comment()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 627
            self.match(DslParser.Node)
            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.state = 628
                self.alias()
                pass
            elif token in [14]:
                self.state = 629
                self.match(DslParser.As)
                self.state = 630
                self.alias()
                pass
            elif token in [1, 12, 132, 133]:
                pass
            else:
                pass
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 633
                self.match(DslParser.Satisfy)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 634
                    self.comment()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 640
                self.condExpr()
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 641
                        self.comment() 
                    self.state = 646
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleNodeAttrQueryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleNodeAttr(self):
            return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def As(self):
            return self.getToken(DslParser.As, 0)

        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_singleNodeAttrQueryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleNodeAttrQueryExpr" ):
                return visitor.visitSingleNodeAttrQueryExpr(self)
            else:
                return visitor.visitChildren(self)




    def singleNodeAttrQueryExpr(self):

        localctx = DslParser.SingleNodeAttrQueryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_singleNodeAttrQueryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 649
                self.comment()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 655
            self.singleNodeAttr()
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.state = 656
                self.alias()
                pass
            elif token in [14]:
                self.state = 657
                self.match(DslParser.As)
                self.state = 658
                self.alias()
                pass
            elif token in [1, 12, 132, 133]:
                pass
            else:
                pass
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 661
                self.match(DslParser.Satisfy)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 662
                    self.comment()
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 668
                self.condExpr()
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 669
                        self.comment() 
                    self.state = 674
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainedDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rootNodeAttr(self):
            return self.getTypedRuleContext(DslParser.RootNodeAttrContext,0)


        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_containedDesc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainedDesc" ):
                return visitor.visitContainedDesc(self)
            else:
                return visitor.visitChildren(self)




    def containedDesc(self):

        localctx = DslParser.ContainedDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_containedDesc)
        self._la = 0 # Token type
        try:
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 677
                    self.comment()
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 683
                self.rootNodeAttr()
                self.state = 684
                self.match(DslParser.Satisfy)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 685
                    self.comment()
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 691
                self.condExpr()
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 692
                        self.comment() 
                    self.state = 697
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 698
                    self.comment()
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 704
                self.rootNodeAttr()
                self.state = 708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 705
                        self.comment() 
                    self.state = 710
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ConfigLabel(self):
            return self.getToken(DslParser.ConfigLabel, 0)

        def getRuleIndex(self):
            return DslParser.RULE_configInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigInfo" ):
                return visitor.visitConfigInfo(self)
            else:
                return visitor.visitChildren(self)




    def configInfo(self):

        localctx = DslParser.ConfigInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_configInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(DslParser.ConfigLabel)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Properties(self):
            return self.getToken(DslParser.Properties, 0)

        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Equal)
            else:
                return self.getToken(DslParser.Equal, i)

        def LeftCurlyBracket(self):
            return self.getToken(DslParser.LeftCurlyBracket, 0)

        def fileNameAttr(self):
            return self.getTypedRuleContext(DslParser.FileNameAttrContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def RightCurlyBracket(self):
            return self.getToken(DslParser.RightCurlyBracket, 0)

        def xPathAttr(self):
            return self.getTypedRuleContext(DslParser.XPathAttrContext,0)


        def keyValueAttr(self):
            return self.getTypedRuleContext(DslParser.KeyValueAttrContext,0)


        def PreciseMatch(self):
            return self.getToken(DslParser.PreciseMatch, 0)

        def preciseMatch(self):
            return self.getTypedRuleContext(DslParser.PreciseMatchContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_configStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigStmt" ):
                return visitor.visitConfigStmt(self)
            else:
                return visitor.visitChildren(self)




    def configStmt(self):

        localctx = DslParser.ConfigStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_configStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(DslParser.Properties)
            self.state = 716
            self.match(DslParser.Equal)
            self.state = 717
            self.match(DslParser.LeftCurlyBracket)
            self.state = 718
            self.fileNameAttr()
            self.state = 719
            self.match(DslParser.Comma)
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.state = 720
                self.xPathAttr()
                pass
            elif token in [58]:
                self.state = 721
                self.keyValueAttr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 724
                self.match(DslParser.Comma)
                self.state = 725
                self.match(DslParser.PreciseMatch)
                self.state = 726
                self.match(DslParser.Equal)
                self.state = 727
                self.preciseMatch()


            self.state = 730
            self.match(DslParser.RightCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreciseMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True_(self):
            return self.getToken(DslParser.True_, 0)

        def False_(self):
            return self.getToken(DslParser.False_, 0)

        def getRuleIndex(self):
            return DslParser.RULE_preciseMatch

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreciseMatch" ):
                return visitor.visitPreciseMatch(self)
            else:
                return visitor.visitChildren(self)




    def preciseMatch(self):

        localctx = DslParser.PreciseMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_preciseMatch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            _la = self._input.LA(1)
            if not(_la==15 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FileName(self):
            return self.getToken(DslParser.FileName, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Match(self):
            return self.getToken(DslParser.Match, 0)

        def getRuleIndex(self):
            return DslParser.RULE_fileNameAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNameAttr" ):
                return visitor.visitFileNameAttr(self)
            else:
                return visitor.visitChildren(self)




    def fileNameAttr(self):

        localctx = DslParser.FileNameAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fileNameAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(DslParser.FileName)
            self.state = 735
            _la = self._input.LA(1)
            if not(_la==22 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 736
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XPathAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XpathMatchExpression(self):
            return self.getToken(DslParser.XpathMatchExpression, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Match(self):
            return self.getToken(DslParser.Match, 0)

        def getRuleIndex(self):
            return DslParser.RULE_xPathAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXPathAttr" ):
                return visitor.visitXPathAttr(self)
            else:
                return visitor.visitChildren(self)




    def xPathAttr(self):

        localctx = DslParser.XPathAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_xPathAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(DslParser.XpathMatchExpression)
            self.state = 739
            _la = self._input.LA(1)
            if not(_la==22 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 740
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PropertyKey(self):
            return self.getToken(DslParser.PropertyKey, 0)

        def strExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrExprContext)
            else:
                return self.getTypedRuleContext(DslParser.StrExprContext,i)


        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def PropertyValue(self):
            return self.getToken(DslParser.PropertyValue, 0)

        def Eq(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Eq)
            else:
                return self.getToken(DslParser.Eq, i)

        def Match(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Match)
            else:
                return self.getToken(DslParser.Match, i)

        def getRuleIndex(self):
            return DslParser.RULE_keyValueAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValueAttr" ):
                return visitor.visitKeyValueAttr(self)
            else:
                return visitor.visitChildren(self)




    def keyValueAttr(self):

        localctx = DslParser.KeyValueAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_keyValueAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(DslParser.PropertyKey)
            self.state = 743
            _la = self._input.LA(1)
            if not(_la==22 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 744
            self.strExpr()
            self.state = 745
            self.match(DslParser.Comma)
            self.state = 746
            self.match(DslParser.PropertyValue)
            self.state = 747
            _la = self._input.LA(1)
            if not(_la==22 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 748
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def taintSource(self):
            return self.getTypedRuleContext(DslParser.TaintSourceContext,0)


        def taintSink(self):
            return self.getTypedRuleContext(DslParser.TaintSinkContext,0)


        def taintPassthrough(self):
            return self.getTypedRuleContext(DslParser.TaintPassthroughContext,0)


        def taintCleanse(self):
            return self.getTypedRuleContext(DslParser.TaintCleanseContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_taintInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintInfo" ):
                return visitor.visitTaintInfo(self)
            else:
                return visitor.visitChildren(self)




    def taintInfo(self):

        localctx = DslParser.TaintInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_taintInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 750
                self.comment()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 756
                self.taintSource()
                pass
            elif token in [61]:
                self.state = 757
                self.taintSink()
                pass
            elif token in [62]:
                self.state = 758
                self.taintPassthrough()
                pass
            elif token in [63]:
                self.state = 759
                self.taintCleanse()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SourceLabel(self):
            return self.getToken(DslParser.SourceLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def outArgs(self):
            return self.getTypedRuleContext(DslParser.OutArgsContext,0)


        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def symbolFlagInfo(self):
            return self.getTypedRuleContext(DslParser.SymbolFlagInfoContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_taintSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintSource" ):
                return visitor.visitTaintSource(self)
            else:
                return visitor.visitChildren(self)




    def taintSource(self):

        localctx = DslParser.TaintSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_taintSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(DslParser.SourceLabel)
            self.state = 763
            self.match(DslParser.LeftBracket)
            self.state = 764
            self.outArgs()
            self.state = 765
            self.match(DslParser.Comma)
            self.state = 766
            self.symbolFlagInfo()
            self.state = 767
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintSinkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SinkLabel(self):
            return self.getToken(DslParser.SinkLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def inArgs(self):
            return self.getTypedRuleContext(DslParser.InArgsContext,0)


        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def symbolFlagInfo(self):
            return self.getTypedRuleContext(DslParser.SymbolFlagInfoContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_taintSink

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintSink" ):
                return visitor.visitTaintSink(self)
            else:
                return visitor.visitChildren(self)




    def taintSink(self):

        localctx = DslParser.TaintSinkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_taintSink)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(DslParser.SinkLabel)
            self.state = 770
            self.match(DslParser.LeftBracket)
            self.state = 771
            self.inArgs()
            self.state = 772
            self.match(DslParser.Comma)
            self.state = 773
            self.symbolFlagInfo()
            self.state = 774
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintPassthroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PassthroughLabel(self):
            return self.getToken(DslParser.PassthroughLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def inArgs(self):
            return self.getTypedRuleContext(DslParser.InArgsContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def outArgs(self):
            return self.getTypedRuleContext(DslParser.OutArgsContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def symbolFlagInfo(self):
            return self.getTypedRuleContext(DslParser.SymbolFlagInfoContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_taintPassthrough

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintPassthrough" ):
                return visitor.visitTaintPassthrough(self)
            else:
                return visitor.visitChildren(self)




    def taintPassthrough(self):

        localctx = DslParser.TaintPassthroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_taintPassthrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(DslParser.PassthroughLabel)
            self.state = 777
            self.match(DslParser.LeftBracket)
            self.state = 778
            self.inArgs()
            self.state = 779
            self.match(DslParser.Comma)
            self.state = 780
            self.outArgs()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 781
                self.match(DslParser.Comma)
                self.state = 782
                self.symbolFlagInfo()


            self.state = 785
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintCleanseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CleanseLabel(self):
            return self.getToken(DslParser.CleanseLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def inArgs(self):
            return self.getTypedRuleContext(DslParser.InArgsContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_taintCleanse

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintCleanse" ):
                return visitor.visitTaintCleanse(self)
            else:
                return visitor.visitChildren(self)




    def taintCleanse(self):

        localctx = DslParser.TaintCleanseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_taintCleanse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(DslParser.CleanseLabel)
            self.state = 788
            self.match(DslParser.LeftBracket)
            self.state = 789
            self.inArgs()
            self.state = 790
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def InArgs(self):
            return self.getToken(DslParser.InArgs, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def taintList(self):
            return self.getTypedRuleContext(DslParser.TaintListContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_inArgs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInArgs" ):
                return visitor.visitInArgs(self)
            else:
                return visitor.visitChildren(self)




    def inArgs(self):

        localctx = DslParser.InArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_inArgs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(DslParser.InArgs)
            self.state = 793
            self.match(DslParser.Equal)
            self.state = 794
            self.taintList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OutArgs(self):
            return self.getToken(DslParser.OutArgs, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def taintList(self):
            return self.getTypedRuleContext(DslParser.TaintListContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_outArgs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutArgs" ):
                return visitor.visitOutArgs(self)
            else:
                return visitor.visitChildren(self)




    def outArgs(self):

        localctx = DslParser.OutArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_outArgs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(DslParser.OutArgs)
            self.state = 797
            self.match(DslParser.Equal)
            self.state = 798
            self.taintList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftMidBracket(self):
            return self.getToken(DslParser.LeftMidBracket, 0)

        def taint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.TaintContext)
            else:
                return self.getTypedRuleContext(DslParser.TaintContext,i)


        def RightMidBracket(self):
            return self.getToken(DslParser.RightMidBracket, 0)

        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def getRuleIndex(self):
            return DslParser.RULE_taintList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaintList" ):
                return visitor.visitTaintList(self)
            else:
                return visitor.visitChildren(self)




    def taintList(self):

        localctx = DslParser.TaintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_taintList)
        self._la = 0 # Token type
        try:
            self.state = 809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(DslParser.LeftMidBracket)
                self.state = 801
                self.taint()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 802
                    self.match(DslParser.Comma)
                    self.state = 803
                    self.taint()


                self.state = 806
                self.match(DslParser.RightMidBracket)
                pass
            elif token in [68, 69, 138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.taint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def This(self):
            return self.getToken(DslParser.This, 0)

        def Return(self):
            return self.getToken(DslParser.Return, 0)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.INT)
            else:
                return self.getToken(DslParser.INT, i)

        def Minus(self):
            return self.getToken(DslParser.Minus, 0)

        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def Dollar(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Dollar)
            else:
                return self.getToken(DslParser.Dollar, i)

        def getRuleIndex(self):
            return DslParser.RULE_taint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaint" ):
                return visitor.visitTaint(self)
            else:
                return visitor.visitChildren(self)




    def taint(self):

        localctx = DslParser.TaintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_taint)
        self._la = 0 # Token type
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(DslParser.This)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(DslParser.Return)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.match(DslParser.INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.match(DslParser.INT)
                self.state = 815
                self.match(DslParser.Minus)
                self.state = 816
                self.match(DslParser.INT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 817
                self.match(DslParser.INT)
                self.state = 818
                self.match(DslParser.Point)
                self.state = 819
                self.match(DslParser.Point)
                self.state = 820
                self.match(DslParser.Point)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 821
                self.match(DslParser.INT)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 822
                    self.match(DslParser.Point)
                    self.state = 823
                    self.match(DslParser.Point)
                    self.state = 824
                    self.match(DslParser.Dollar)
                    self.state = 825
                    self.match(DslParser.INT)
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolFlagInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flag(self):
            return self.getToken(DslParser.Flag, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def flagList(self):
            return self.getTypedRuleContext(DslParser.FlagListContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_symbolFlagInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolFlagInfo" ):
                return visitor.visitSymbolFlagInfo(self)
            else:
                return visitor.visitChildren(self)




    def symbolFlagInfo(self):

        localctx = DslParser.SymbolFlagInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_symbolFlagInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(DslParser.Flag)
            self.state = 834
            self.match(DslParser.Equal)
            self.state = 835
            self.flagList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftMidBracket(self):
            return self.getToken(DslParser.LeftMidBracket, 0)

        def flag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.FlagContext)
            else:
                return self.getTypedRuleContext(DslParser.FlagContext,i)


        def RightMidBracket(self):
            return self.getToken(DslParser.RightMidBracket, 0)

        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def getRuleIndex(self):
            return DslParser.RULE_flagList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagList" ):
                return visitor.visitFlagList(self)
            else:
                return visitor.visitChildren(self)




    def flagList(self):

        localctx = DslParser.FlagListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_flagList)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.match(DslParser.LeftMidBracket)
                self.state = 838
                self.flag()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 839
                    self.match(DslParser.Comma)
                    self.state = 840
                    self.flag()


                self.state = 843
                self.match(DslParser.RightMidBracket)
                pass
            elif token in [70, 72, 97, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.flag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(DslParser.ALIAS, 0)

        def flagOperator(self):
            return self.getTypedRuleContext(DslParser.FlagOperatorContext,0)


        def Cooddy(self):
            return self.getToken(DslParser.Cooddy, 0)

        def getRuleIndex(self):
            return DslParser.RULE_flag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlag" ):
                return visitor.visitFlag(self)
            else:
                return visitor.visitChildren(self)




    def flag(self):

        localctx = DslParser.FlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_flag)
        self._la = 0 # Token type
        try:
            self.state = 853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 72, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==72:
                    self.state = 848
                    self.flagOperator()


                self.state = 851
                self.match(DslParser.ALIAS)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(DslParser.Cooddy)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(DslParser.Plus, 0)

        def Minus(self):
            return self.getToken(DslParser.Minus, 0)

        def getRuleIndex(self):
            return DslParser.RULE_flagOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagOperator" ):
                return visitor.visitFlagOperator(self)
            else:
                return visitor.visitChildren(self)




    def flagOperator(self):

        localctx = DslParser.FlagOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_flagOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            _la = self._input.LA(1)
            if not(_la==70 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSetMessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RuleSetMessageLabel(self):
            return self.getToken(DslParser.RuleSetMessageLabel, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.LeftBracket)
            else:
                return self.getToken(DslParser.LeftBracket, i)

        def RuleSetName(self):
            return self.getToken(DslParser.RuleSetName, 0)

        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Equal)
            else:
                return self.getToken(DslParser.Equal, i)

        def ruleSetName(self):
            return self.getTypedRuleContext(DslParser.RuleSetNameContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def ReportMsg(self):
            return self.getToken(DslParser.ReportMsg, 0)

        def descriptionMsg(self):
            return self.getTypedRuleContext(DslParser.DescriptionMsgContext,0)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.RightBracket)
            else:
                return self.getToken(DslParser.RightBracket, i)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def Language(self):
            return self.getToken(DslParser.Language, 0)

        def language(self):
            return self.getTypedRuleContext(DslParser.LanguageContext,0)


        def Type(self):
            return self.getToken(DslParser.Type, 0)

        def ruleSetType(self):
            return self.getTypedRuleContext(DslParser.RuleSetTypeContext,0)


        def Engine(self):
            return self.getToken(DslParser.Engine, 0)

        def engine(self):
            return self.getTypedRuleContext(DslParser.EngineContext,0)


        def Version(self):
            return self.getToken(DslParser.Version, 0)

        def version(self):
            return self.getTypedRuleContext(DslParser.VersionContext,0)


        def CustomInfo(self):
            return self.getToken(DslParser.CustomInfo, 0)

        def customInfo(self):
            return self.getTypedRuleContext(DslParser.CustomInfoContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_ruleSetMessage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleSetMessage" ):
                return visitor.visitRuleSetMessage(self)
            else:
                return visitor.visitChildren(self)




    def ruleSetMessage(self):

        localctx = DslParser.RuleSetMessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ruleSetMessage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 857
                self.comment()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 863
            self.match(DslParser.RuleSetMessageLabel)
            self.state = 864
            self.match(DslParser.LeftBracket)
            self.state = 865
            self.match(DslParser.RuleSetName)
            self.state = 866
            self.match(DslParser.Equal)
            self.state = 867
            self.ruleSetName()
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 868
                self.match(DslParser.Comma)
                self.state = 869
                self.match(DslParser.Language)
                self.state = 870
                self.match(DslParser.Equal)
                self.state = 871
                self.language()


            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 874
                self.match(DslParser.Comma)
                self.state = 875
                self.match(DslParser.Type)
                self.state = 876
                self.match(DslParser.Equal)
                self.state = 877
                self.ruleSetType()


            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 880
                self.match(DslParser.Comma)
                self.state = 881
                self.match(DslParser.Engine)
                self.state = 882
                self.match(DslParser.Equal)
                self.state = 883
                self.engine()


            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 886
                self.match(DslParser.Comma)
                self.state = 887
                self.match(DslParser.Version)
                self.state = 888
                self.match(DslParser.Equal)
                self.state = 889
                self.version()


            self.state = 892
            self.match(DslParser.Comma)
            self.state = 893
            self.match(DslParser.ReportMsg)
            self.state = 894
            self.match(DslParser.Equal)
            self.state = 895
            self.descriptionMsg()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 896
                self.match(DslParser.Comma)
                self.state = 897
                self.match(DslParser.CustomInfo)
                self.state = 898
                self.match(DslParser.Equal)
                self.state = 899
                self.match(DslParser.LeftBracket)
                self.state = 900
                self.customInfo()
                self.state = 901
                self.match(DslParser.RightBracket)


            self.state = 905
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_ruleSetName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleSetName" ):
                return visitor.visitRuleSetName(self)
            else:
                return visitor.visitChildren(self)




    def ruleSetName(self):

        localctx = DslParser.RuleSetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ruleSetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Java(self):
            return self.getToken(DslParser.Java, 0)

        def Python(self):
            return self.getToken(DslParser.Python, 0)

        def CPP(self):
            return self.getToken(DslParser.CPP, 0)

        def C(self):
            return self.getToken(DslParser.C, 0)

        def ArkTs(self):
            return self.getToken(DslParser.ArkTs, 0)

        def TypeScript(self):
            return self.getToken(DslParser.TypeScript, 0)

        def JavaScript(self):
            return self.getToken(DslParser.JavaScript, 0)

        def getRuleIndex(self):
            return DslParser.RULE_language

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLanguage" ):
                return visitor.visitLanguage(self)
            else:
                return visitor.visitChildren(self)




    def language(self):

        localctx = DslParser.LanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_language)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSetTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Taint(self):
            return self.getToken(DslParser.Taint, 0)

        def Structural(self):
            return self.getToken(DslParser.Structural, 0)

        def getRuleIndex(self):
            return DslParser.RULE_ruleSetType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleSetType" ):
                return visitor.visitRuleSetType(self)
            else:
                return visitor.visitChildren(self)




    def ruleSetType(self):

        localctx = DslParser.RuleSetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ruleSetType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            _la = self._input.LA(1)
            if not(_la==94 or _la==95):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cooddy(self):
            return self.getToken(DslParser.Cooddy, 0)

        def CSA(self):
            return self.getToken(DslParser.CSA, 0)

        def Soot(self):
            return self.getToken(DslParser.Soot, 0)

        def Cpg(self):
            return self.getToken(DslParser.Cpg, 0)

        def getRuleIndex(self):
            return DslParser.RULE_engine

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngine" ):
                return visitor.visitEngine(self)
            else:
                return visitor.visitChildren(self)




    def engine(self):

        localctx = DslParser.EngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_engine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_version

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = DslParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptionMsgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_descriptionMsg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescriptionMsg" ):
                return visitor.visitDescriptionMsg(self)
            else:
                return visitor.visitChildren(self)




    def descriptionMsg(self):

        localctx = DslParser.DescriptionMsgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_descriptionMsg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.KeyValuePairContext)
            else:
                return self.getTypedRuleContext(DslParser.KeyValuePairContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def getRuleIndex(self):
            return DslParser.RULE_customInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomInfo" ):
                return visitor.visitCustomInfo(self)
            else:
                return visitor.visitChildren(self)




    def customInfo(self):

        localctx = DslParser.CustomInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_customInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135 or _la==136:
                self.state = 919
                self.keyValuePair()


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 922
                self.match(DslParser.Comma)
                self.state = 923
                self.keyValuePair()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrExprContext)
            else:
                return self.getTypedRuleContext(DslParser.StrExprContext,i)


        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def getRuleIndex(self):
            return DslParser.RULE_keyValuePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValuePair" ):
                return visitor.visitKeyValuePair(self)
            else:
                return visitor.visitChildren(self)




    def keyValuePair(self):

        localctx = DslParser.KeyValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_keyValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.strExpr()
            self.state = 930
            self.match(DslParser.Equal)
            self.state = 931
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VulnerabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VulnerabilityLabel(self):
            return self.getToken(DslParser.VulnerabilityLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def category(self):
            return self.getTypedRuleContext(DslParser.CategoryContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def subCategory(self):
            return self.getTypedRuleContext(DslParser.SubCategoryContext,0)


        def issueType(self):
            return self.getTypedRuleContext(DslParser.IssueTypeContext,0)


        def cwe(self):
            return self.getTypedRuleContext(DslParser.CweContext,0)


        def severity(self):
            return self.getTypedRuleContext(DslParser.SeverityContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_vulnerability

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVulnerability" ):
                return visitor.visitVulnerability(self)
            else:
                return visitor.visitChildren(self)




    def vulnerability(self):

        localctx = DslParser.VulnerabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_vulnerability)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(DslParser.VulnerabilityLabel)
            self.state = 934
            self.match(DslParser.LeftBracket)
            self.state = 935
            self.category()
            self.state = 936
            self.match(DslParser.Comma)
            self.state = 937
            self.subCategory()
            self.state = 938
            self.match(DslParser.Comma)
            self.state = 939
            self.issueType()
            self.state = 940
            self.match(DslParser.Comma)
            self.state = 941
            self.cwe()
            self.state = 942
            self.match(DslParser.Comma)
            self.state = 943
            self.severity()
            self.state = 944
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CategoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Category(self):
            return self.getToken(DslParser.Category, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_category

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCategory" ):
                return visitor.visitCategory(self)
            else:
                return visitor.visitChildren(self)




    def category(self):

        localctx = DslParser.CategoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_category)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(DslParser.Category)
            self.state = 947
            self.match(DslParser.Equal)
            self.state = 948
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubCategoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Subcategory(self):
            return self.getToken(DslParser.Subcategory, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_subCategory

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubCategory" ):
                return visitor.visitSubCategory(self)
            else:
                return visitor.visitChildren(self)




    def subCategory(self):

        localctx = DslParser.SubCategoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_subCategory)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(DslParser.Subcategory)
            self.state = 951
            self.match(DslParser.Equal)
            self.state = 952
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IssueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IssueType(self):
            return self.getToken(DslParser.IssueType, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_issueType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIssueType" ):
                return visitor.visitIssueType(self)
            else:
                return visitor.visitChildren(self)




    def issueType(self):

        localctx = DslParser.IssueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_issueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(DslParser.IssueType)
            self.state = 955
            self.match(DslParser.Equal)
            self.state = 956
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CweContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CWE(self):
            return self.getToken(DslParser.CWE, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_cwe

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCwe" ):
                return visitor.visitCwe(self)
            else:
                return visitor.visitChildren(self)




    def cwe(self):

        localctx = DslParser.CweContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_cwe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(DslParser.CWE)
            self.state = 959
            self.match(DslParser.Equal)
            self.state = 960
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeverityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Severity(self):
            return self.getToken(DslParser.Severity, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def severityLabel(self):
            return self.getTypedRuleContext(DslParser.SeverityLabelContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_severity

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeverity" ):
                return visitor.visitSeverity(self)
            else:
                return visitor.visitChildren(self)




    def severity(self):

        localctx = DslParser.SeverityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_severity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(DslParser.Severity)
            self.state = 963
            self.match(DslParser.Equal)
            self.state = 964
            self.severityLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeverityLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suggest(self):
            return self.getToken(DslParser.Suggest, 0)

        def Normal(self):
            return self.getToken(DslParser.Normal, 0)

        def Critical(self):
            return self.getToken(DslParser.Critical, 0)

        def Fatal(self):
            return self.getToken(DslParser.Fatal, 0)

        def Error(self):
            return self.getToken(DslParser.Error, 0)

        def Warning(self):
            return self.getToken(DslParser.Warning, 0)

        def getRuleIndex(self):
            return DslParser.RULE_severityLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeverityLabel" ):
                return visitor.visitSeverityLabel(self)
            else:
                return visitor.visitChildren(self)




    def severityLabel(self):

        localctx = DslParser.SeverityLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_severityLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMsgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RuleMsgLabel(self):
            return self.getToken(DslParser.RuleMsgLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def description(self):
            return self.getTypedRuleContext(DslParser.DescriptionContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def ruleId(self):
            return self.getTypedRuleContext(DslParser.RuleIdContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_ruleMsg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleMsg" ):
                return visitor.visitRuleMsg(self)
            else:
                return visitor.visitChildren(self)




    def ruleMsg(self):

        localctx = DslParser.RuleMsgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ruleMsg)
        self._la = 0 # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 968
                    self.comment()
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 974
                self.match(DslParser.RuleMsgLabel)
                self.state = 975
                self.match(DslParser.LeftBracket)
                self.state = 976
                self.description()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 977
                    self.match(DslParser.Comma)
                    self.state = 978
                    self.ruleId()


                self.state = 981
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 983
                    self.comment()
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 989
                self.match(DslParser.RuleMsgLabel)
                self.state = 990
                self.match(DslParser.LeftBracket)
                self.state = 991
                self.ruleId()
                self.state = 992
                self.match(DslParser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReportMsg(self):
            return self.getToken(DslParser.ReportMsg, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def reportExpr(self):
            return self.getTypedRuleContext(DslParser.ReportExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_description

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescription" ):
                return visitor.visitDescription(self)
            else:
                return visitor.visitChildren(self)




    def description(self):

        localctx = DslParser.DescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(DslParser.ReportMsg)
            self.state = 997
            self.match(DslParser.Equal)
            self.state = 998
            self.reportExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RuleId(self):
            return self.getToken(DslParser.RuleId, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_ruleId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleId" ):
                return visitor.visitRuleId(self)
            else:
                return visitor.visitChildren(self)




    def ruleId(self):

        localctx = DslParser.RuleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ruleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(DslParser.RuleId)
            self.state = 1001
            self.match(DslParser.Equal)
            self.state = 1002
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterizedWarningInfo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ParameterizedWarningInfoContext)
            else:
                return self.getTypedRuleContext(DslParser.ParameterizedWarningInfoContext,i)


        def strExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrExprContext)
            else:
                return self.getTypedRuleContext(DslParser.StrExprContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Plus)
            else:
                return self.getToken(DslParser.Plus, i)

        def getRuleIndex(self):
            return DslParser.RULE_reportExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportExpr" ):
                return visitor.visitReportExpr(self)
            else:
                return visitor.visitChildren(self)




    def reportExpr(self):

        localctx = DslParser.ReportExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_reportExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.state = 1004
                self.parameterizedWarningInfo()
                pass
            elif token in [135, 136]:
                self.state = 1005
                self.strExpr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 1008
                self.match(DslParser.Plus)
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [134]:
                    self.state = 1009
                    self.parameterizedWarningInfo()
                    pass
                elif token in [135, 136]:
                    self.state = 1010
                    self.strExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterizedWarningInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def valueAttr(self):
            return self.getTypedRuleContext(DslParser.ValueAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_parameterizedWarningInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterizedWarningInfo" ):
                return visitor.visitParameterizedWarningInfo(self)
            else:
                return visitor.visitChildren(self)




    def parameterizedWarningInfo(self):

        localctx = DslParser.ParameterizedWarningInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_parameterizedWarningInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.alias()
            self.state = 1023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1019
                    self.match(DslParser.Point)
                    self.state = 1020
                    self.singleNodeAttr() 
                self.state = 1025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1026
                self.match(DslParser.Point)
                self.state = 1027
                self.valueAttr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumAttr(self):
            return self.getToken(DslParser.NumAttr, 0)

        def ObjPropertyAttr(self):
            return self.getToken(DslParser.ObjPropertyAttr, 0)

        def StrAttr(self):
            return self.getToken(DslParser.StrAttr, 0)

        def BoolAttr(self):
            return self.getToken(DslParser.BoolAttr, 0)

        def getRuleIndex(self):
            return DslParser.RULE_valueAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueAttr" ):
                return visitor.visitValueAttr(self)
            else:
                return visitor.visitChildren(self)




    def valueAttr(self):

        localctx = DslParser.ValueAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_valueAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            _la = self._input.LA(1)
            if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 29) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImprtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ImportLabel(self):
            return self.getToken(DslParser.ImportLabel, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_imprt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImprt" ):
                return visitor.visitImprt(self)
            else:
                return visitor.visitChildren(self)




    def imprt(self):

        localctx = DslParser.ImprtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_imprt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 1032
                self.comment()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1038
            self.match(DslParser.ImportLabel)
            self.state = 1039
            self.match(DslParser.LeftBracket)
            self.state = 1040
            self.strExpr()
            self.state = 1041
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def condExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CondExprContext)
            else:
                return self.getTypedRuleContext(DslParser.CondExprContext,i)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def AND(self):
            return self.getToken(DslParser.AND, 0)

        def OR(self):
            return self.getToken(DslParser.OR, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def NOT(self):
            return self.getToken(DslParser.NOT, 0)

        def condition(self):
            return self.getTypedRuleContext(DslParser.ConditionContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_condExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondExpr" ):
                return visitor.visitCondExpr(self)
            else:
                return visitor.visitChildren(self)




    def condExpr(self):

        localctx = DslParser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                _la = self._input.LA(1)
                if not(_la==38 or _la==39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1044
                self.match(DslParser.LeftBracket)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1045
                    self.comment()
                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1051
                self.condExpr()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1052
                    self.comment()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1072 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1058
                    self.match(DslParser.Comma)
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 1059
                        self.comment()
                        self.state = 1064
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1065
                    self.condExpr()
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132 or _la==133:
                        self.state = 1066
                        self.comment()
                        self.state = 1071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1074 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 1076
                self.match(DslParser.RightBracket)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(DslParser.NOT)
                self.state = 1079
                self.match(DslParser.LeftBracket)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1080
                    self.comment()
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1086
                self.condExpr()
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1087
                    self.comment()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1093
                self.match(DslParser.RightBracket)
                pass
            elif token in [6, 17, 36, 69, 70, 72, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 134, 135, 136, 138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directCondition(self):
            return self.getTypedRuleContext(DslParser.DirectConditionContext,0)


        def encapsulateCondition(self):
            return self.getTypedRuleContext(DslParser.EncapsulateConditionContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_condition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = DslParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_condition)
        try:
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 36, 69, 70, 72, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 134, 135, 136, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.directCondition()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.encapsulateCondition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolCondition(self):
            return self.getTypedRuleContext(DslParser.BoolConditionContext,0)


        def nodeCondition(self):
            return self.getTypedRuleContext(DslParser.NodeConditionContext,0)


        def nodeNullCondition(self):
            return self.getTypedRuleContext(DslParser.NodeNullConditionContext,0)


        def numCondition(self):
            return self.getTypedRuleContext(DslParser.NumConditionContext,0)


        def objCondition(self):
            return self.getTypedRuleContext(DslParser.ObjConditionContext,0)


        def strCondition(self):
            return self.getTypedRuleContext(DslParser.StrConditionContext,0)


        def boolCollectionCondition(self):
            return self.getTypedRuleContext(DslParser.BoolCollectionConditionContext,0)


        def nodeCollectionCondition(self):
            return self.getTypedRuleContext(DslParser.NodeCollectionConditionContext,0)


        def numCollectionCondition(self):
            return self.getTypedRuleContext(DslParser.NumCollectionConditionContext,0)


        def objCollectionCondition(self):
            return self.getTypedRuleContext(DslParser.ObjCollectionConditionContext,0)


        def strCollectionCondition(self):
            return self.getTypedRuleContext(DslParser.StrCollectionConditionContext,0)


        def groupCondition(self):
            return self.getTypedRuleContext(DslParser.GroupConditionContext,0)


        def hasCondition(self):
            return self.getTypedRuleContext(DslParser.HasConditionContext,0)


        def isCondition(self):
            return self.getTypedRuleContext(DslParser.IsConditionContext,0)


        def isAliasCondition(self):
            return self.getTypedRuleContext(DslParser.IsAliasConditionContext,0)


        def dfgCondition(self):
            return self.getTypedRuleContext(DslParser.DfgConditionContext,0)


        def dfgPathCondition(self):
            return self.getTypedRuleContext(DslParser.DfgPathConditionContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_directCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectCondition" ):
                return visitor.visitDirectCondition(self)
            else:
                return visitor.visitChildren(self)




    def directCondition(self):

        localctx = DslParser.DirectConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_directCondition)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.boolCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.nodeCondition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1104
                self.nodeNullCondition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1105
                self.numCondition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1106
                self.objCondition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1107
                self.strCondition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1108
                self.boolCollectionCondition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1109
                self.nodeCollectionCondition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1110
                self.numCollectionCondition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1111
                self.objCollectionCondition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1112
                self.strCollectionCondition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1113
                self.groupCondition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1114
                self.hasCondition()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1115
                self.isCondition()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1116
                self.isAliasCondition()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1117
                self.dfgCondition()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1118
                self.dfgPathCondition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolAttr(self):
            return self.getTypedRuleContext(DslParser.BoolAttrContext,0)


        def boolOperator(self):
            return self.getTypedRuleContext(DslParser.BoolOperatorContext,0)


        def boolExpr(self):
            return self.getTypedRuleContext(DslParser.BoolExprContext,0)


        def aliasBoolAttr(self):
            return self.getTypedRuleContext(DslParser.AliasBoolAttrContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def BooleanNot(self):
            return self.getToken(DslParser.BooleanNot, 0)

        def getRuleIndex(self):
            return DslParser.RULE_boolCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolCondition" ):
                return visitor.visitBoolCondition(self)
            else:
                return visitor.visitChildren(self)




    def boolCondition(self):

        localctx = DslParser.BoolConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boolCondition)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1121
                    self.aliasHead()


                self.state = 1124
                self.boolAttr()
                self.state = 1125
                self.boolOperator()
                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15, 16]:
                    self.state = 1126
                    self.boolExpr()
                    pass
                elif token in [134]:
                    self.state = 1127
                    self.aliasBoolAttr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1130
                    self.aliasHead()


                self.state = 1133
                self.boolAttr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.match(DslParser.BooleanNot)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1135
                    self.aliasHead()


                self.state = 1138
                self.boolAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_nodeCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeCondition" ):
                return visitor.visitNodeCondition(self)
            else:
                return visitor.visitChildren(self)




    def nodeCondition(self):

        localctx = DslParser.NodeConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nodeCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1141
                self.aliasHead()


            self.state = 1144
            self.nodeAttrWithAlias()
            self.state = 1145
            self.match(DslParser.Satisfy)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 1146
                self.comment()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.condExpr()
            self.state = 1156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1153
                    self.comment() 
                self.state = 1158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeNullConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def nullOperator(self):
            return self.getTypedRuleContext(DslParser.NullOperatorContext,0)


        def nullExpr(self):
            return self.getTypedRuleContext(DslParser.NullExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nodeNullCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeNullCondition" ):
                return visitor.visitNodeNullCondition(self)
            else:
                return visitor.visitChildren(self)




    def nodeNullCondition(self):

        localctx = DslParser.NodeNullConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_nodeNullCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1159
                self.aliasHead()


            self.state = 1162
            self.nodeAttrWithAlias()
            self.state = 1163
            self.nullOperator()
            self.state = 1164
            self.nullExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalNumCondition(self):
            return self.getTypedRuleContext(DslParser.OriginalNumConditionContext,0)


        def numCalCondition(self):
            return self.getTypedRuleContext(DslParser.NumCalConditionContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumCondition" ):
                return visitor.visitNumCondition(self)
            else:
                return visitor.visitChildren(self)




    def numCondition(self):

        localctx = DslParser.NumConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_numCondition)
        try:
            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.originalNumCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.numCalCondition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalNumConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numAttr(self):
            return self.getTypedRuleContext(DslParser.NumAttrContext,0)


        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def numRightExpr(self):
            return self.getTypedRuleContext(DslParser.NumRightExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_originalNumCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalNumCondition" ):
                return visitor.visitOriginalNumCondition(self)
            else:
                return visitor.visitChildren(self)




    def originalNumCondition(self):

        localctx = DslParser.OriginalNumConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_originalNumCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1170
                self.aliasHead()


            self.state = 1173
            self.numAttr()
            self.state = 1174
            self.numOperator()
            self.state = 1175
            self.numRightExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumCalConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numLeftExpr(self):
            return self.getTypedRuleContext(DslParser.NumLeftExprContext,0)


        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def numRightExpr(self):
            return self.getTypedRuleContext(DslParser.NumRightExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numCalCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumCalCondition" ):
                return visitor.visitNumCalCondition(self)
            else:
                return visitor.visitChildren(self)




    def numCalCondition(self):

        localctx = DslParser.NumCalConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_numCalCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.numLeftExpr()
            self.state = 1178
            self.numOperator()
            self.state = 1179
            self.numRightExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumLeftExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numAttr(self):
            return self.getTypedRuleContext(DslParser.NumAttrContext,0)


        def prefixIntConst(self):
            return self.getTypedRuleContext(DslParser.PrefixIntConstContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def suffixIntConst(self):
            return self.getTypedRuleContext(DslParser.SuffixIntConstContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numLeftExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumLeftExpr" ):
                return visitor.visitNumLeftExpr(self)
            else:
                return visitor.visitChildren(self)




    def numLeftExpr(self):

        localctx = DslParser.NumLeftExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_numLeftExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==72 or _la==138:
                self.state = 1181
                self.prefixIntConst()


            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1184
                self.aliasHead()


            self.state = 1187
            self.numAttr()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0):
                self.state = 1188
                self.suffixIntConst()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objAttr(self):
            return self.getTypedRuleContext(DslParser.ObjAttrContext,0)


        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def boolOperator(self):
            return self.getTypedRuleContext(DslParser.BoolOperatorContext,0)


        def boolExpr(self):
            return self.getTypedRuleContext(DslParser.BoolExprContext,0)


        def strOperator(self):
            return self.getTypedRuleContext(DslParser.StrOperatorContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def aliasStrAttr(self):
            return self.getTypedRuleContext(DslParser.AliasStrAttrContext,0)


        def aliasObjAttr(self):
            return self.getTypedRuleContext(DslParser.AliasObjAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_objCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjCondition" ):
                return visitor.visitObjCondition(self)
            else:
                return visitor.visitChildren(self)




    def objCondition(self):

        localctx = DslParser.ObjConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_objCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1191
                self.aliasHead()


            self.state = 1194
            self.objAttr()
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1195
                self.numOperator()
                self.state = 1196
                self.numExpr()
                pass

            elif la_ == 2:
                self.state = 1198
                self.boolOperator()
                self.state = 1199
                self.boolExpr()
                pass

            elif la_ == 3:
                self.state = 1201
                self.strOperator()
                self.state = 1205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.strExpr()
                    pass

                elif la_ == 2:
                    self.state = 1203
                    self.aliasStrAttr()
                    pass

                elif la_ == 3:
                    self.state = 1204
                    self.aliasObjAttr()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strConditionEndInStr(self):
            return self.getTypedRuleContext(DslParser.StrConditionEndInStrContext,0)


        def strConditionEndInNum(self):
            return self.getTypedRuleContext(DslParser.StrConditionEndInNumContext,0)


        def strConditionEndInBool(self):
            return self.getTypedRuleContext(DslParser.StrConditionEndInBoolContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrCondition" ):
                return visitor.visitStrCondition(self)
            else:
                return visitor.visitChildren(self)




    def strCondition(self):

        localctx = DslParser.StrConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_strCondition)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.strConditionEndInStr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.strConditionEndInNum()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.strConditionEndInBool()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolCollectionConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionBoolAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionBoolAttrContext,0)


        def collectionOperator(self):
            return self.getTypedRuleContext(DslParser.CollectionOperatorContext,0)


        def boolExpr(self):
            return self.getTypedRuleContext(DslParser.BoolExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_boolCollectionCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolCollectionCondition" ):
                return visitor.visitBoolCollectionCondition(self)
            else:
                return visitor.visitChildren(self)




    def boolCollectionCondition(self):

        localctx = DslParser.BoolCollectionConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_boolCollectionCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1214
                self.aliasHead()


            self.state = 1217
            self.collectionBoolAttr()
            self.state = 1218
            self.collectionOperator()
            self.state = 1219
            self.boolExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjCollectionConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionObjAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionObjAttrContext,0)


        def collectionOperator(self):
            return self.getTypedRuleContext(DslParser.CollectionOperatorContext,0)


        def objExpr(self):
            return self.getTypedRuleContext(DslParser.ObjExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_objCollectionCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjCollectionCondition" ):
                return visitor.visitObjCollectionCondition(self)
            else:
                return visitor.visitChildren(self)




    def objCollectionCondition(self):

        localctx = DslParser.ObjCollectionConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_objCollectionCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1221
                self.aliasHead()


            self.state = 1224
            self.collectionObjAttr()
            self.state = 1225
            self.collectionOperator()
            self.state = 1226
            self.objExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeCollectionConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionOperator(self):
            return self.getTypedRuleContext(DslParser.CollectionOperatorContext,0)


        def alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.AliasContext)
            else:
                return self.getTypedRuleContext(DslParser.AliasContext,i)


        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def collectionNodeAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNodeAttrContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nodeCollectionCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeCollectionCondition" ):
                return visitor.visitNodeCollectionCondition(self)
            else:
                return visitor.visitChildren(self)




    def nodeCollectionCondition(self):

        localctx = DslParser.NodeCollectionConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_nodeCollectionCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1228
                    self.aliasHead()


                self.state = 1231
                self.collectionNodeAttr()
                pass

            elif la_ == 2:
                self.state = 1232
                self.alias()
                pass


            self.state = 1235
            self.collectionOperator()
            self.state = 1236
            self.alias()
            self.state = 1237
            self.match(DslParser.Satisfy)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==133:
                self.state = 1238
                self.comment()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1244
            self.condExpr()
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1245
                    self.comment() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumCollectionConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionNumAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNumAttrContext,0)


        def collectionOperator(self):
            return self.getTypedRuleContext(DslParser.CollectionOperatorContext,0)


        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numCollectionCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumCollectionCondition" ):
                return visitor.visitNumCollectionCondition(self)
            else:
                return visitor.visitChildren(self)




    def numCollectionCondition(self):

        localctx = DslParser.NumCollectionConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_numCollectionCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1251
                self.aliasHead()


            self.state = 1254
            self.collectionNumAttr()
            self.state = 1255
            self.collectionOperator()
            self.state = 1256
            self.numExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrCollectionConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionStrAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionStrAttrContext,0)


        def collectionOperator(self):
            return self.getTypedRuleContext(DslParser.CollectionOperatorContext,0)


        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strCollectionCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrCollectionCondition" ):
                return visitor.visitStrCollectionCondition(self)
            else:
                return visitor.visitChildren(self)




    def strCollectionCondition(self):

        localctx = DslParser.StrCollectionConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_strCollectionCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1258
                self.aliasHead()


            self.state = 1261
            self.collectionStrAttr()
            self.state = 1262
            self.collectionOperator()
            self.state = 1263
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupAttr(self):
            return self.getTypedRuleContext(DslParser.GroupAttrContext,0)


        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def numRightExpr(self):
            return self.getTypedRuleContext(DslParser.NumRightExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_groupCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupCondition" ):
                return visitor.visitGroupCondition(self)
            else:
                return visitor.visitChildren(self)




    def groupCondition(self):

        localctx = DslParser.GroupConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_groupCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1265
                self.aliasHead()


            self.state = 1268
            self.groupAttr()
            self.state = 1269
            self.numOperator()
            self.state = 1270
            self.numRightExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HasConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hasOperator(self):
            return self.getTypedRuleContext(DslParser.HasOperatorContext,0)


        def containedDesc(self):
            return self.getTypedRuleContext(DslParser.ContainedDescContext,0)


        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def This(self):
            return self.getToken(DslParser.This, 0)

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_hasCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHasCondition" ):
                return visitor.visitHasCondition(self)
            else:
                return visitor.visitChildren(self)




    def hasCondition(self):

        localctx = DslParser.HasConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_hasCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1272
                    self.aliasHead()


                self.state = 1275
                self.nodeAttrWithAlias()
                pass

            elif la_ == 2:
                self.state = 1276
                self.alias()
                pass

            elif la_ == 3:
                self.state = 1277
                self.match(DslParser.This)
                pass


            self.state = 1280
            self.hasOperator()
            self.state = 1281
            self.containedDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(DslParser.IsOperatorContext,0)


        def Node(self):
            return self.getToken(DslParser.Node, 0)

        def NodeAttr(self):
            return self.getToken(DslParser.NodeAttr, 0)

        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def This(self):
            return self.getToken(DslParser.This, 0)

        def Satisfy(self):
            return self.getToken(DslParser.Satisfy, 0)

        def condExpr(self):
            return self.getTypedRuleContext(DslParser.CondExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_isCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsCondition" ):
                return visitor.visitIsCondition(self)
            else:
                return visitor.visitChildren(self)




    def isCondition(self):

        localctx = DslParser.IsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_isCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1283
                    self.aliasHead()


                self.state = 1286
                self.nodeAttrWithAlias()
                pass

            elif la_ == 2:
                self.state = 1287
                self.alias()
                pass

            elif la_ == 3:
                self.state = 1288
                self.match(DslParser.This)
                pass


            self.state = 1291
            self.isOperator()
            self.state = 1292
            _la = self._input.LA(1)
            if not(_la==117 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1293
                self.match(DslParser.Satisfy)
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1294
                    self.comment()
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1300
                self.condExpr()
                self.state = 1304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1301
                        self.comment() 
                    self.state = 1306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsAliasConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(DslParser.IsOperatorContext,0)


        def aliasNodeAttr(self):
            return self.getTypedRuleContext(DslParser.AliasNodeAttrContext,0)


        def nonRecursiveNodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NonRecursiveNodeAttrWithAliasContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def This(self):
            return self.getToken(DslParser.This, 0)

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_isAliasCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsAliasCondition" ):
                return visitor.visitIsAliasCondition(self)
            else:
                return visitor.visitChildren(self)




    def isAliasCondition(self):

        localctx = DslParser.IsAliasConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_isAliasCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1309
                    self.aliasHead()


                self.state = 1312
                self.nonRecursiveNodeAttrWithAlias()
                pass

            elif la_ == 2:
                self.state = 1313
                self.alias()
                pass

            elif la_ == 3:
                self.state = 1314
                self.match(DslParser.This)
                pass


            self.state = 1317
            self.isOperator()
            self.state = 1318
            self.aliasNodeAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DfgConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def presence(self):
            return self.getTypedRuleContext(DslParser.PresenceContext,0)


        def direction(self):
            return self.getTypedRuleContext(DslParser.DirectionContext,0)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def containedDesc(self):
            return self.getTypedRuleContext(DslParser.ContainedDescContext,0)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def This(self):
            return self.getToken(DslParser.This, 0)

        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def Depth(self):
            return self.getToken(DslParser.Depth, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def INT(self):
            return self.getToken(DslParser.INT, 0)

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_dfgCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDfgCondition" ):
                return visitor.visitDfgCondition(self)
            else:
                return visitor.visitChildren(self)




    def dfgCondition(self):

        localctx = DslParser.DfgConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dfgCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1320
                    self.aliasHead()


                self.state = 1323
                self.nodeAttrWithAlias()
                pass

            elif la_ == 2:
                self.state = 1324
                self.alias()
                pass

            elif la_ == 3:
                self.state = 1325
                self.match(DslParser.This)
                pass


            self.state = 1328
            self.presence()
            self.state = 1329
            self.direction()
            self.state = 1330
            self.match(DslParser.LeftBracket)
            self.state = 1331
            self.containedDesc()
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 1332
                self.match(DslParser.Comma)
                self.state = 1333
                self.match(DslParser.Depth)
                self.state = 1334
                self.match(DslParser.Equal)
                self.state = 1335
                self.match(DslParser.INT)


            self.state = 1338
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DfgPathConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def presence(self):
            return self.getTypedRuleContext(DslParser.PresenceContext,0)


        def direction(self):
            return self.getTypedRuleContext(DslParser.DirectionContext,0)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def containedDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.ContainedDescContext)
            else:
                return self.getTypedRuleContext(DslParser.ContainedDescContext,i)


        def Until(self):
            return self.getToken(DslParser.Until, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def nodeAttrWithAlias(self):
            return self.getTypedRuleContext(DslParser.NodeAttrWithAliasContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def This(self):
            return self.getToken(DslParser.This, 0)

        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def Depth(self):
            return self.getToken(DslParser.Depth, 0)

        def Equal(self):
            return self.getToken(DslParser.Equal, 0)

        def INT(self):
            return self.getToken(DslParser.INT, 0)

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_dfgPathCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDfgPathCondition" ):
                return visitor.visitDfgPathCondition(self)
            else:
                return visitor.visitChildren(self)




    def dfgPathCondition(self):

        localctx = DslParser.DfgPathConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dfgPathCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1340
                    self.aliasHead()


                self.state = 1343
                self.nodeAttrWithAlias()
                pass

            elif la_ == 2:
                self.state = 1344
                self.alias()
                pass

            elif la_ == 3:
                self.state = 1345
                self.match(DslParser.This)
                pass


            self.state = 1348
            self.presence()
            self.state = 1349
            self.direction()
            self.state = 1350
            self.match(DslParser.LeftBracket)
            self.state = 1351
            self.containedDesc()
            self.state = 1352
            self.match(DslParser.Until)
            self.state = 1353
            self.containedDesc()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 1354
                self.match(DslParser.Comma)
                self.state = 1355
                self.match(DslParser.Depth)
                self.state = 1356
                self.match(DslParser.Equal)
                self.state = 1357
                self.match(DslParser.INT)


            self.state = 1360
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EncapsulateConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Condition(self):
            return self.getToken(DslParser.Condition, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def strExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrExprContext)
            else:
                return self.getTypedRuleContext(DslParser.StrExprContext,i)


        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Comma)
            else:
                return self.getToken(DslParser.Comma, i)

        def getRuleIndex(self):
            return DslParser.RULE_encapsulateCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncapsulateCondition" ):
                return visitor.visitEncapsulateCondition(self)
            else:
                return visitor.visitChildren(self)




    def encapsulateCondition(self):

        localctx = DslParser.EncapsulateConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_encapsulateCondition)
        self._la = 0 # Token type
        try:
            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.match(DslParser.Condition)
                self.state = 1363
                self.match(DslParser.LeftBracket)
                self.state = 1364
                self.strExpr()
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1365
                    self.match(DslParser.Comma)
                    self.state = 1366
                    self.strExpr()
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1372
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.match(DslParser.Condition)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolExpr(self):
            return self.getTypedRuleContext(DslParser.BoolExprContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.CommentContext)
            else:
                return self.getTypedRuleContext(DslParser.CommentContext,i)


        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def nullExpr(self):
            return self.getTypedRuleContext(DslParser.NullExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_objExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjExpr" ):
                return visitor.visitObjExpr(self)
            else:
                return visitor.visitChildren(self)




    def objExpr(self):

        localctx = DslParser.ObjExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_objExpr)
        self._la = 0 # Token type
        try:
            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1377
                    self.comment()
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1383
                self.boolExpr()
                self.state = 1387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1384
                        self.comment() 
                    self.state = 1389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1390
                    self.comment()
                    self.state = 1395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1396
                self.numExpr()
                self.state = 1400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1397
                        self.comment() 
                    self.state = 1402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1403
                    self.comment()
                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1409
                self.strExpr()
                self.state = 1413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1410
                        self.comment() 
                    self.state = 1415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==133:
                    self.state = 1416
                    self.comment()
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1422
                self.nullExpr()
                self.state = 1426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1423
                        self.comment() 
                    self.state = 1428
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True_(self):
            return self.getToken(DslParser.True_, 0)

        def False_(self):
            return self.getToken(DslParser.False_, 0)

        def getRuleIndex(self):
            return DslParser.RULE_boolExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolExpr" ):
                return visitor.visitBoolExpr(self)
            else:
                return visitor.visitChildren(self)




    def boolExpr(self):

        localctx = DslParser.BoolExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_boolExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            _la = self._input.LA(1)
            if not(_la==15 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.INT)
            else:
                return self.getToken(DslParser.INT, i)

        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def Plus(self):
            return self.getToken(DslParser.Plus, 0)

        def Minus(self):
            return self.getToken(DslParser.Minus, 0)

        def getRuleIndex(self):
            return DslParser.RULE_numExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumExpr" ):
                return visitor.visitNumExpr(self)
            else:
                return visitor.visitChildren(self)




    def numExpr(self):

        localctx = DslParser.NumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_numExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==72:
                self.state = 1433
                _la = self._input.LA(1)
                if not(_la==70 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1436
            self.match(DslParser.INT)
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1437
                self.match(DslParser.Point)
                self.state = 1438
                self.match(DslParser.INT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(DslParser.NULL, 0)

        def getRuleIndex(self):
            return DslParser.RULE_nullExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullExpr" ):
                return visitor.visitNullExpr(self)
            else:
                return visitor.visitChildren(self)




    def nullExpr(self):

        localctx = DslParser.NullExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_nullExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(DslParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumRightExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def aliasNumAttr(self):
            return self.getTypedRuleContext(DslParser.AliasNumAttrContext,0)


        def aliasGroupAttr(self):
            return self.getTypedRuleContext(DslParser.AliasGroupAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numRightExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumRightExpr" ):
                return visitor.visitNumRightExpr(self)
            else:
                return visitor.visitChildren(self)




    def numRightExpr(self):

        localctx = DslParser.NumRightExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_numRightExpr)
        try:
            self.state = 1446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1443
                self.numExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.aliasNumAttr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1445
                self.aliasGroupAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(DslParser.ID, 0)

        def STRING(self):
            return self.getToken(DslParser.STRING, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrExpr" ):
                return visitor.visitStrExpr(self)
            else:
                return visitor.visitChildren(self)




    def strExpr(self):

        localctx = DslParser.StrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_strExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            _la = self._input.LA(1)
            if not(_la==135 or _la==136):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrConditionEndInStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftStrOperandEndInStr(self):
            return self.getTypedRuleContext(DslParser.LeftStrOperandEndInStrContext,0)


        def strOperator(self):
            return self.getTypedRuleContext(DslParser.StrOperatorContext,0)


        def rightStrOperandEndInStr(self):
            return self.getTypedRuleContext(DslParser.RightStrOperandEndInStrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strConditionEndInStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrConditionEndInStr" ):
                return visitor.visitStrConditionEndInStr(self)
            else:
                return visitor.visitChildren(self)




    def strConditionEndInStr(self):

        localctx = DslParser.StrConditionEndInStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_strConditionEndInStr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.leftStrOperandEndInStr()
            self.state = 1451
            self.strOperator()
            self.state = 1452
            self.rightStrOperandEndInStr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrConditionEndInNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftStrOperandEndInNum(self):
            return self.getTypedRuleContext(DslParser.LeftStrOperandEndInNumContext,0)


        def numOperator(self):
            return self.getTypedRuleContext(DslParser.NumOperatorContext,0)


        def rightStrOperandEndInNum(self):
            return self.getTypedRuleContext(DslParser.RightStrOperandEndInNumContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strConditionEndInNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrConditionEndInNum" ):
                return visitor.visitStrConditionEndInNum(self)
            else:
                return visitor.visitChildren(self)




    def strConditionEndInNum(self):

        localctx = DslParser.StrConditionEndInNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_strConditionEndInNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.leftStrOperandEndInNum()
            self.state = 1455
            self.numOperator()
            self.state = 1456
            self.rightStrOperandEndInNum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrConditionEndInBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftStrOperandEndInBool(self):
            return self.getTypedRuleContext(DslParser.LeftStrOperandEndInBoolContext,0)


        def boolOperator(self):
            return self.getTypedRuleContext(DslParser.BoolOperatorContext,0)


        def rightStrOperandEndInBool(self):
            return self.getTypedRuleContext(DslParser.RightStrOperandEndInBoolContext,0)


        def singleStrOperandEndInBool(self):
            return self.getTypedRuleContext(DslParser.SingleStrOperandEndInBoolContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strConditionEndInBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrConditionEndInBool" ):
                return visitor.visitStrConditionEndInBool(self)
            else:
                return visitor.visitChildren(self)




    def strConditionEndInBool(self):

        localctx = DslParser.StrConditionEndInBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_strConditionEndInBool)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.leftStrOperandEndInBool()
                self.state = 1459
                self.boolOperator()
                self.state = 1460
                self.rightStrOperandEndInBool()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.singleStrOperandEndInBool()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftStrOperandEndInStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strVariableEndInStr(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInStrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_leftStrOperandEndInStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftStrOperandEndInStr" ):
                return visitor.visitLeftStrOperandEndInStr(self)
            else:
                return visitor.visitChildren(self)




    def leftStrOperandEndInStr(self):

        localctx = DslParser.LeftStrOperandEndInStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_leftStrOperandEndInStr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.strVariableEndInStr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightStrOperandEndInStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strConstant(self):
            return self.getTypedRuleContext(DslParser.StrConstantContext,0)


        def strVariableEndInStr(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInStrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_rightStrOperandEndInStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightStrOperandEndInStr" ):
                return visitor.visitRightStrOperandEndInStr(self)
            else:
                return visitor.visitChildren(self)




    def rightStrOperandEndInStr(self):

        localctx = DslParser.RightStrOperandEndInStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_rightStrOperandEndInStr)
        try:
            self.state = 1469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1467
                self.strConstant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.strVariableEndInStr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrVariableEndInStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strAttr(self):
            return self.getTypedRuleContext(DslParser.StrAttrContext,0)


        def aliasStrAttr(self):
            return self.getTypedRuleContext(DslParser.AliasStrAttrContext,0)


        def aliasObjAttr(self):
            return self.getTypedRuleContext(DslParser.AliasObjAttrContext,0)


        def prefixStrConst(self):
            return self.getTypedRuleContext(DslParser.PrefixStrConstContext,0)


        def strInvokeStrChain(self):
            return self.getTypedRuleContext(DslParser.StrInvokeStrChainContext,0)


        def suffixStrConst(self):
            return self.getTypedRuleContext(DslParser.SuffixStrConstContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strVariableEndInStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrVariableEndInStr" ):
                return visitor.visitStrVariableEndInStr(self)
            else:
                return visitor.visitChildren(self)




    def strVariableEndInStr(self):

        localctx = DslParser.StrVariableEndInStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_strVariableEndInStr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135 or _la==136:
                self.state = 1471
                self.prefixStrConst()


            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1474
                self.strAttr()
                pass

            elif la_ == 2:
                self.state = 1475
                self.aliasStrAttr()
                pass

            elif la_ == 3:
                self.state = 1476
                self.aliasObjAttr()
                pass


            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1479
                self.strInvokeStrChain()


            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1482
                self.suffixStrConst()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strConstant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrConstant" ):
                return visitor.visitStrConstant(self)
            else:
                return visitor.visitChildren(self)




    def strConstant(self):

        localctx = DslParser.StrConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_strConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftStrOperandEndInNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strVariableEndInNum(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInNumContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_leftStrOperandEndInNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftStrOperandEndInNum" ):
                return visitor.visitLeftStrOperandEndInNum(self)
            else:
                return visitor.visitChildren(self)




    def leftStrOperandEndInNum(self):

        localctx = DslParser.LeftStrOperandEndInNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_leftStrOperandEndInNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.strVariableEndInNum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightStrOperandEndInNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numRightExpr(self):
            return self.getTypedRuleContext(DslParser.NumRightExprContext,0)


        def strVariableEndInNum(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInNumContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_rightStrOperandEndInNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightStrOperandEndInNum" ):
                return visitor.visitRightStrOperandEndInNum(self)
            else:
                return visitor.visitChildren(self)




    def rightStrOperandEndInNum(self):

        localctx = DslParser.RightStrOperandEndInNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_rightStrOperandEndInNum)
        try:
            self.state = 1491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.numRightExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1490
                self.strVariableEndInNum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrVariableEndInNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strAttr(self):
            return self.getTypedRuleContext(DslParser.StrAttrContext,0)


        def strInvokeIntExpr(self):
            return self.getTypedRuleContext(DslParser.StrInvokeIntExprContext,0)


        def prefixIntConst(self):
            return self.getTypedRuleContext(DslParser.PrefixIntConstContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def strInvokeStrChain(self):
            return self.getTypedRuleContext(DslParser.StrInvokeStrChainContext,0)


        def suffixIntConst(self):
            return self.getTypedRuleContext(DslParser.SuffixIntConstContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strVariableEndInNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrVariableEndInNum" ):
                return visitor.visitStrVariableEndInNum(self)
            else:
                return visitor.visitChildren(self)




    def strVariableEndInNum(self):

        localctx = DslParser.StrVariableEndInNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_strVariableEndInNum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==72 or _la==138:
                self.state = 1493
                self.prefixIntConst()


            self.state = 1497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1496
                self.aliasHead()


            self.state = 1499
            self.strAttr()
            self.state = 1501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1500
                self.strInvokeStrChain()


            self.state = 1503
            self.strInvokeIntExpr()
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0):
                self.state = 1504
                self.suffixIntConst()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrInvokeStrChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def strUtilityStr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrUtilityStrContext)
            else:
                return self.getTypedRuleContext(DslParser.StrUtilityStrContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_strInvokeStrChain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrInvokeStrChain" ):
                return visitor.visitStrInvokeStrChain(self)
            else:
                return visitor.visitChildren(self)




    def strInvokeStrChain(self):

        localctx = DslParser.StrInvokeStrChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_strInvokeStrChain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1507
                    self.match(DslParser.Point)
                    self.state = 1508
                    self.strUtilityStr()

                else:
                    raise NoViableAltException(self)
                self.state = 1511 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrInvokeIntExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def strUtilityInt(self):
            return self.getTypedRuleContext(DslParser.StrUtilityIntContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strInvokeIntExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrInvokeIntExpr" ):
                return visitor.visitStrInvokeIntExpr(self)
            else:
                return visitor.visitChildren(self)




    def strInvokeIntExpr(self):

        localctx = DslParser.StrInvokeIntExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_strInvokeIntExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.match(DslParser.Point)
            self.state = 1514
            self.strUtilityInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftStrOperandEndInBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strVariableEndInBool(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInBoolContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_leftStrOperandEndInBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftStrOperandEndInBool" ):
                return visitor.visitLeftStrOperandEndInBool(self)
            else:
                return visitor.visitChildren(self)




    def leftStrOperandEndInBool(self):

        localctx = DslParser.LeftStrOperandEndInBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_leftStrOperandEndInBool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.strVariableEndInBool()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightStrOperandEndInBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolExpr(self):
            return self.getTypedRuleContext(DslParser.BoolExprContext,0)


        def strVariableEndInBool(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInBoolContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_rightStrOperandEndInBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightStrOperandEndInBool" ):
                return visitor.visitRightStrOperandEndInBool(self)
            else:
                return visitor.visitChildren(self)




    def rightStrOperandEndInBool(self):

        localctx = DslParser.RightStrOperandEndInBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_rightStrOperandEndInBool)
        try:
            self.state = 1520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.boolExpr()
                pass
            elif token in [119, 121, 126, 128, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.strVariableEndInBool()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStrOperandEndInBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strVariableEndInBool(self):
            return self.getTypedRuleContext(DslParser.StrVariableEndInBoolContext,0)


        def BooleanNot(self):
            return self.getToken(DslParser.BooleanNot, 0)

        def getRuleIndex(self):
            return DslParser.RULE_singleStrOperandEndInBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStrOperandEndInBool" ):
                return visitor.visitSingleStrOperandEndInBool(self)
            else:
                return visitor.visitChildren(self)




    def singleStrOperandEndInBool(self):

        localctx = DslParser.SingleStrOperandEndInBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_singleStrOperandEndInBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1522
                self.match(DslParser.BooleanNot)


            self.state = 1525
            self.strVariableEndInBool()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrVariableEndInBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strAttr(self):
            return self.getTypedRuleContext(DslParser.StrAttrContext,0)


        def strInvokeBoolExpr(self):
            return self.getTypedRuleContext(DslParser.StrInvokeBoolExprContext,0)


        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def strInvokeStrChain(self):
            return self.getTypedRuleContext(DslParser.StrInvokeStrChainContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strVariableEndInBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrVariableEndInBool" ):
                return visitor.visitStrVariableEndInBool(self)
            else:
                return visitor.visitChildren(self)




    def strVariableEndInBool(self):

        localctx = DslParser.StrVariableEndInBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_strVariableEndInBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1527
                self.aliasHead()


            self.state = 1530
            self.strAttr()
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1531
                self.strInvokeStrChain()


            self.state = 1534
            self.strInvokeBoolExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrInvokeBoolExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def strUtilityBool(self):
            return self.getTypedRuleContext(DslParser.StrUtilityBoolContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strInvokeBoolExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrInvokeBoolExpr" ):
                return visitor.visitStrInvokeBoolExpr(self)
            else:
                return visitor.visitChildren(self)




    def strInvokeBoolExpr(self):

        localctx = DslParser.StrInvokeBoolExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_strInvokeBoolExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(DslParser.Point)
            self.state = 1537
            self.strUtilityBool()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixStrConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def Plus(self):
            return self.getToken(DslParser.Plus, 0)

        def getRuleIndex(self):
            return DslParser.RULE_prefixStrConst

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixStrConst" ):
                return visitor.visitPrefixStrConst(self)
            else:
                return visitor.visitChildren(self)




    def prefixStrConst(self):

        localctx = DslParser.PrefixStrConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_prefixStrConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.strExpr()
            self.state = 1540
            self.match(DslParser.Plus)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixStrConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(DslParser.Plus, 0)

        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_suffixStrConst

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixStrConst" ):
                return visitor.visitSuffixStrConst(self)
            else:
                return visitor.visitChildren(self)




    def suffixStrConst(self):

        localctx = DslParser.SuffixStrConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_suffixStrConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(DslParser.Plus)
            self.state = 1543
            self.strExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(DslParser.Plus, 0)

        def Minus(self):
            return self.getToken(DslParser.Minus, 0)

        def Star(self):
            return self.getToken(DslParser.Star, 0)

        def Divide(self):
            return self.getToken(DslParser.Divide, 0)

        def getRuleIndex(self):
            return DslParser.RULE_utilityOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityOperator" ):
                return visitor.visitUtilityOperator(self)
            else:
                return visitor.visitChildren(self)




    def utilityOperator(self):

        localctx = DslParser.UtilityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_utilityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixIntConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def utilityOperator(self):
            return self.getTypedRuleContext(DslParser.UtilityOperatorContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_prefixIntConst

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixIntConst" ):
                return visitor.visitPrefixIntConst(self)
            else:
                return visitor.visitChildren(self)




    def prefixIntConst(self):

        localctx = DslParser.PrefixIntConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_prefixIntConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.numExpr()
            self.state = 1548
            self.utilityOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixIntConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def utilityOperator(self):
            return self.getTypedRuleContext(DslParser.UtilityOperatorContext,0)


        def numExpr(self):
            return self.getTypedRuleContext(DslParser.NumExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_suffixIntConst

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixIntConst" ):
                return visitor.visitSuffixIntConst(self)
            else:
                return visitor.visitChildren(self)




    def suffixIntConst(self):

        localctx = DslParser.SuffixIntConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_suffixIntConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.utilityOperator()
            self.state = 1551
            self.numExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalBoolAttr(self):
            return self.getTypedRuleContext(DslParser.NormalBoolAttrContext,0)


        def indexBoolAttr(self):
            return self.getTypedRuleContext(DslParser.IndexBoolAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_boolAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolAttr" ):
                return visitor.visitBoolAttr(self)
            else:
                return visitor.visitChildren(self)




    def boolAttr(self):

        localctx = DslParser.BoolAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_boolAttr)
        try:
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.normalBoolAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.indexBoolAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalBoolAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolAttr(self):
            return self.getToken(DslParser.BoolAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_normalBoolAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalBoolAttr" ):
                return visitor.visitNormalBoolAttr(self)
            else:
                return visitor.visitChildren(self)




    def normalBoolAttr(self):

        localctx = DslParser.NormalBoolAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_normalBoolAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1557
                self.singleNodeAttr()
                self.state = 1558
                self.match(DslParser.Point)
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1565
            self.match(DslParser.BoolAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexBoolAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionBoolAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionBoolAttrContext,0)


        def index(self):
            return self.getTypedRuleContext(DslParser.IndexContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_indexBoolAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexBoolAttr" ):
                return visitor.visitIndexBoolAttr(self)
            else:
                return visitor.visitChildren(self)




    def indexBoolAttr(self):

        localctx = DslParser.IndexBoolAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_indexBoolAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.collectionBoolAttr()
            self.state = 1568
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasBoolAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def boolAttr(self):
            return self.getTypedRuleContext(DslParser.BoolAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_aliasBoolAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasBoolAttr" ):
                return visitor.visitAliasBoolAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasBoolAttr(self):

        localctx = DslParser.AliasBoolAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_aliasBoolAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.aliasHead()
            self.state = 1571
            self.boolAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeAttrWithAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeAttr(self):
            return self.getTypedRuleContext(DslParser.NodeAttrContext,0)


        def As(self):
            return self.getToken(DslParser.As, 0)

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nodeAttrWithAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeAttrWithAlias" ):
                return visitor.visitNodeAttrWithAlias(self)
            else:
                return visitor.visitChildren(self)




    def nodeAttrWithAlias(self):

        localctx = DslParser.NodeAttrWithAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_nodeAttrWithAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.nodeAttr()
            self.state = 1577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 1574
                self.match(DslParser.As)
                self.state = 1575
                self.alias()
                pass
            elif token in [134]:
                self.state = 1576
                self.alias()
                pass
            elif token in [12, 22, 23, 24, 25, 32, 33, 34, 35]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonRecursiveNodeAttrWithAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonRecursiveNodeAttr(self):
            return self.getTypedRuleContext(DslParser.NonRecursiveNodeAttrContext,0)


        def As(self):
            return self.getToken(DslParser.As, 0)

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nonRecursiveNodeAttrWithAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonRecursiveNodeAttrWithAlias" ):
                return visitor.visitNonRecursiveNodeAttrWithAlias(self)
            else:
                return visitor.visitChildren(self)




    def nonRecursiveNodeAttrWithAlias(self):

        localctx = DslParser.NonRecursiveNodeAttrWithAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_nonRecursiveNodeAttrWithAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.nonRecursiveNodeAttr()
            self.state = 1583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 1580
                self.match(DslParser.As)
                self.state = 1581
                self.alias()
                pass
            elif token in [134]:
                self.state = 1582
                self.alias()
                pass
            elif token in [34, 35]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def recursiveNodeAttr(self):
            return self.getTypedRuleContext(DslParser.RecursiveNodeAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_nodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeAttr" ):
                return visitor.visitNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def nodeAttr(self):

        localctx = DslParser.NodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_nodeAttr)
        self._la = 0 # Token type
        try:
            self.state = 1605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.singleNodeAttr()
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1586
                    self.match(DslParser.Point)
                    self.state = 1587
                    self.singleNodeAttr()
                    self.state = 1592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.singleNodeAttr()
                self.state = 1598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1594
                        self.match(DslParser.Point)
                        self.state = 1595
                        self.singleNodeAttr() 
                    self.state = 1600
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                self.state = 1601
                self.match(DslParser.Point)
                self.state = 1602
                self.recursiveNodeAttr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1604
                self.recursiveNodeAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonRecursiveNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_nonRecursiveNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonRecursiveNodeAttr" ):
                return visitor.visitNonRecursiveNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def nonRecursiveNodeAttr(self):

        localctx = DslParser.NonRecursiveNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_nonRecursiveNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.singleNodeAttr()
            self.state = 1612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1608
                    self.match(DslParser.Point)
                    self.state = 1609
                    self.singleNodeAttr() 
                self.state = 1614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecursiveNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Star(self):
            return self.getToken(DslParser.Star, 0)

        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_recursiveNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecursiveNodeAttr" ):
                return visitor.visitRecursiveNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def recursiveNodeAttr(self):

        localctx = DslParser.RecursiveNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_recursiveNodeAttr)
        self._la = 0 # Token type
        try:
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1615
                self.singleNodeAttr()
                self.state = 1616
                self.match(DslParser.Star)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1618
                self.match(DslParser.LeftBracket)

                self.state = 1619
                self.singleNodeAttr()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1620
                    self.match(DslParser.Point)
                    self.state = 1621
                    self.singleNodeAttr()
                    self.state = 1626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1627
                self.match(DslParser.RightBracket)
                self.state = 1628
                self.match(DslParser.Star)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def getRuleIndex(self):
            return DslParser.RULE_aliasNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasNodeAttr" ):
                return visitor.visitAliasNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasNodeAttr(self):

        localctx = DslParser.AliasNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_aliasNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.alias()
            self.state = 1637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1633
                    self.match(DslParser.Point)
                    self.state = 1634
                    self.singleNodeAttr() 
                self.state = 1639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalNumAttr(self):
            return self.getTypedRuleContext(DslParser.NormalNumAttrContext,0)


        def indexNumAttr(self):
            return self.getTypedRuleContext(DslParser.IndexNumAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_numAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumAttr" ):
                return visitor.visitNumAttr(self)
            else:
                return visitor.visitChildren(self)




    def numAttr(self):

        localctx = DslParser.NumAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_numAttr)
        try:
            self.state = 1642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1640
                self.normalNumAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1641
                self.indexNumAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalNumAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumAttr(self):
            return self.getToken(DslParser.NumAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_normalNumAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalNumAttr" ):
                return visitor.visitNormalNumAttr(self)
            else:
                return visitor.visitChildren(self)




    def normalNumAttr(self):

        localctx = DslParser.NormalNumAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_normalNumAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1644
                self.singleNodeAttr()
                self.state = 1645
                self.match(DslParser.Point)
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1652
            self.match(DslParser.NumAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNumAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionNumAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNumAttrContext,0)


        def index(self):
            return self.getTypedRuleContext(DslParser.IndexContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_indexNumAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexNumAttr" ):
                return visitor.visitIndexNumAttr(self)
            else:
                return visitor.visitChildren(self)




    def indexNumAttr(self):

        localctx = DslParser.IndexNumAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_indexNumAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.collectionNumAttr()
            self.state = 1655
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasNumAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def numAttr(self):
            return self.getTypedRuleContext(DslParser.NumAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_aliasNumAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasNumAttr" ):
                return visitor.visitAliasNumAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasNumAttr(self):

        localctx = DslParser.AliasNumAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_aliasNumAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.aliasHead()
            self.state = 1658
            self.numAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def size(self):
            return self.getTypedRuleContext(DslParser.SizeContext,0)


        def boolAttr(self):
            return self.getTypedRuleContext(DslParser.BoolAttrContext,0)


        def nonRecursiveNodeAttr(self):
            return self.getTypedRuleContext(DslParser.NonRecursiveNodeAttrContext,0)


        def numAttr(self):
            return self.getTypedRuleContext(DslParser.NumAttrContext,0)


        def objAttr(self):
            return self.getTypedRuleContext(DslParser.ObjAttrContext,0)


        def strAttr(self):
            return self.getTypedRuleContext(DslParser.StrAttrContext,0)


        def collectionAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionAttrContext,0)


        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_groupAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupAttr" ):
                return visitor.visitGroupAttr(self)
            else:
                return visitor.visitChildren(self)




    def groupAttr(self):

        localctx = DslParser.GroupAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_groupAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1660
                self.boolAttr()
                pass

            elif la_ == 2:
                self.state = 1661
                self.nonRecursiveNodeAttr()
                pass

            elif la_ == 3:
                self.state = 1662
                self.numAttr()
                pass

            elif la_ == 4:
                self.state = 1663
                self.objAttr()
                pass

            elif la_ == 5:
                self.state = 1664
                self.strAttr()
                pass

            elif la_ == 6:
                self.state = 1665
                self.collectionAttr()
                pass

            elif la_ == 7:
                self.state = 1666
                self.alias()
                pass


            self.state = 1669
            self.match(DslParser.Point)
            self.state = 1670
            self.size()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasGroupAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def groupAttr(self):
            return self.getTypedRuleContext(DslParser.GroupAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_aliasGroupAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasGroupAttr" ):
                return visitor.visitAliasGroupAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasGroupAttr(self):

        localctx = DslParser.AliasGroupAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_aliasGroupAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.aliasHead()
            self.state = 1673
            self.groupAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalObjAttr(self):
            return self.getTypedRuleContext(DslParser.NormalObjAttrContext,0)


        def indexObjAttr(self):
            return self.getTypedRuleContext(DslParser.IndexObjAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_objAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjAttr" ):
                return visitor.visitObjAttr(self)
            else:
                return visitor.visitChildren(self)




    def objAttr(self):

        localctx = DslParser.ObjAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_objAttr)
        try:
            self.state = 1677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.normalObjAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                self.indexObjAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalObjAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ObjPropertyAttr(self):
            return self.getToken(DslParser.ObjPropertyAttr, 0)

        def ObjNodeAttr(self):
            return self.getToken(DslParser.ObjNodeAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_normalObjAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalObjAttr" ):
                return visitor.visitNormalObjAttr(self)
            else:
                return visitor.visitChildren(self)




    def normalObjAttr(self):

        localctx = DslParser.NormalObjAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_normalObjAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1679
                self.singleNodeAttr()
                self.state = 1680
                self.match(DslParser.Point)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1687
            _la = self._input.LA(1)
            if not(_la==122 or _la==123):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexObjAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionObjAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionObjAttrContext,0)


        def index(self):
            return self.getTypedRuleContext(DslParser.IndexContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_indexObjAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexObjAttr" ):
                return visitor.visitIndexObjAttr(self)
            else:
                return visitor.visitChildren(self)




    def indexObjAttr(self):

        localctx = DslParser.IndexObjAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_indexObjAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.collectionObjAttr()
            self.state = 1690
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasObjAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def objAttr(self):
            return self.getTypedRuleContext(DslParser.ObjAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_aliasObjAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasObjAttr" ):
                return visitor.visitAliasObjAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasObjAttr(self):

        localctx = DslParser.AliasObjAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_aliasObjAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.aliasHead()
            self.state = 1693
            self.objAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalStrAttr(self):
            return self.getTypedRuleContext(DslParser.NormalStrAttrContext,0)


        def indexStrAttr(self):
            return self.getTypedRuleContext(DslParser.IndexStrAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrAttr" ):
                return visitor.visitStrAttr(self)
            else:
                return visitor.visitChildren(self)




    def strAttr(self):

        localctx = DslParser.StrAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_strAttr)
        try:
            self.state = 1697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                self.normalStrAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1696
                self.indexStrAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalStrAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StrAttr(self):
            return self.getToken(DslParser.StrAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_normalStrAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalStrAttr" ):
                return visitor.visitNormalStrAttr(self)
            else:
                return visitor.visitChildren(self)




    def normalStrAttr(self):

        localctx = DslParser.NormalStrAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_normalStrAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1699
                self.singleNodeAttr()
                self.state = 1700
                self.match(DslParser.Point)
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1707
            self.match(DslParser.StrAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexStrAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionStrAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionStrAttrContext,0)


        def index(self):
            return self.getTypedRuleContext(DslParser.IndexContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_indexStrAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexStrAttr" ):
                return visitor.visitIndexStrAttr(self)
            else:
                return visitor.visitChildren(self)




    def indexStrAttr(self):

        localctx = DslParser.IndexStrAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_indexStrAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.collectionStrAttr()
            self.state = 1710
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasStrAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasHead(self):
            return self.getTypedRuleContext(DslParser.AliasHeadContext,0)


        def strAttr(self):
            return self.getTypedRuleContext(DslParser.StrAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_aliasStrAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasStrAttr" ):
                return visitor.visitAliasStrAttr(self)
            else:
                return visitor.visitChildren(self)




    def aliasStrAttr(self):

        localctx = DslParser.AliasStrAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_aliasStrAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.aliasHead()
            self.state = 1713
            self.strAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionBoolAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionBoolAttrContext,0)


        def collectionNodeAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNodeAttrContext,0)


        def collectionNumAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNumAttrContext,0)


        def collectionObjAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionObjAttrContext,0)


        def collectionStrAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionStrAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_collectionAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionAttr" ):
                return visitor.visitCollectionAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionAttr(self):

        localctx = DslParser.CollectionAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_collectionAttr)
        try:
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1715
                self.collectionBoolAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self.collectionNodeAttr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1717
                self.collectionNumAttr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1718
                self.collectionObjAttr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1719
                self.collectionStrAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionBoolAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionBoolAttr(self):
            return self.getToken(DslParser.CollectionBoolAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_collectionBoolAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionBoolAttr" ):
                return visitor.visitCollectionBoolAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionBoolAttr(self):

        localctx = DslParser.CollectionBoolAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_collectionBoolAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1722
                self.singleNodeAttr()
                self.state = 1723
                self.match(DslParser.Point)
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1730
            self.match(DslParser.CollectionBoolAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionNodeAttr(self):
            return self.getToken(DslParser.CollectionNodeAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_collectionNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionNodeAttr" ):
                return visitor.visitCollectionNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionNodeAttr(self):

        localctx = DslParser.CollectionNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_collectionNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1732
                    self.singleNodeAttr()
                    self.state = 1733
                    self.match(DslParser.Point) 
                self.state = 1739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

            self.state = 1740
            self.match(DslParser.CollectionNodeAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionNumAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionNumAttr(self):
            return self.getToken(DslParser.CollectionNumAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_collectionNumAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionNumAttr" ):
                return visitor.visitCollectionNumAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionNumAttr(self):

        localctx = DslParser.CollectionNumAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_collectionNumAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1742
                self.singleNodeAttr()
                self.state = 1743
                self.match(DslParser.Point)
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1750
            self.match(DslParser.CollectionNumAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionObjAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionObjAttr(self):
            return self.getToken(DslParser.CollectionObjAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_collectionObjAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionObjAttr" ):
                return visitor.visitCollectionObjAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionObjAttr(self):

        localctx = DslParser.CollectionObjAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_collectionObjAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1752
                self.singleNodeAttr()
                self.state = 1753
                self.match(DslParser.Point)
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1760
            self.match(DslParser.CollectionObjAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionStrAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionStrAttr(self):
            return self.getToken(DslParser.CollectionStrAttr, 0)

        def singleNodeAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.SingleNodeAttrContext)
            else:
                return self.getTypedRuleContext(DslParser.SingleNodeAttrContext,i)


        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def getRuleIndex(self):
            return DslParser.RULE_collectionStrAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionStrAttr" ):
                return visitor.visitCollectionStrAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionStrAttr(self):

        localctx = DslParser.CollectionStrAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_collectionStrAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119 or _la==126:
                self.state = 1762
                self.singleNodeAttr()
                self.state = 1763
                self.match(DslParser.Point)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1770
            self.match(DslParser.CollectionStrAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositeSingleNodeAttr(self):
            return self.getTypedRuleContext(DslParser.CompositeSingleNodeAttrContext,0)


        def collectionSingleNodeAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionSingleNodeAttrContext,0)


        def simpleSingleNodeAttr(self):
            return self.getTypedRuleContext(DslParser.SimpleSingleNodeAttrContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_singleNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleNodeAttr" ):
                return visitor.visitSingleNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def singleNodeAttr(self):

        localctx = DslParser.SingleNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_singleNodeAttr)
        try:
            self.state = 1775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1772
                self.compositeSingleNodeAttr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1773
                self.collectionSingleNodeAttr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1774
                self.simpleSingleNodeAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeSingleNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionNodeAttr(self):
            return self.getToken(DslParser.CollectionNodeAttr, 0)

        def index(self):
            return self.getTypedRuleContext(DslParser.IndexContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_compositeSingleNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompositeSingleNodeAttr" ):
                return visitor.visitCompositeSingleNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def compositeSingleNodeAttr(self):

        localctx = DslParser.CompositeSingleNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_compositeSingleNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(DslParser.CollectionNodeAttr)
            self.state = 1778
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionSingleNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CollectionNodeAttr(self):
            return self.getToken(DslParser.CollectionNodeAttr, 0)

        def getRuleIndex(self):
            return DslParser.RULE_collectionSingleNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionSingleNodeAttr" ):
                return visitor.visitCollectionSingleNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def collectionSingleNodeAttr(self):

        localctx = DslParser.CollectionSingleNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_collectionSingleNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(DslParser.CollectionNodeAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleSingleNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NodeAttr(self):
            return self.getToken(DslParser.NodeAttr, 0)

        def getRuleIndex(self):
            return DslParser.RULE_simpleSingleNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSingleNodeAttr" ):
                return visitor.visitSimpleSingleNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def simpleSingleNodeAttr(self):

        localctx = DslParser.SimpleSingleNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_simpleSingleNodeAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            self.match(DslParser.NodeAttr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def Point(self):
            return self.getToken(DslParser.Point, 0)

        def getRuleIndex(self):
            return DslParser.RULE_aliasHead

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasHead" ):
                return visitor.visitAliasHead(self)
            else:
                return visitor.visitChildren(self)




    def aliasHead(self):

        localctx = DslParser.AliasHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_aliasHead)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.alias()
            self.state = 1785
            self.match(DslParser.Point)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strUtilityStrNameWithoutParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithoutParamContext,0)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def strUtilityStrNameWithSingleIntParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithSingleIntParamContext,0)


        def allInt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.AllIntContext)
            else:
                return self.getTypedRuleContext(DslParser.AllIntContext,i)


        def strUtilityStrNameWithDoubleIntParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithDoubleIntParamContext,0)


        def Comma(self):
            return self.getToken(DslParser.Comma, 0)

        def strUtilityStrNameWithSingleStringParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithSingleStringParamContext,0)


        def strExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DslParser.StrExprContext)
            else:
                return self.getTypedRuleContext(DslParser.StrExprContext,i)


        def strUtilityStrNameWithDoubleStringParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithDoubleStringParamContext,0)


        def strUtilityStrNameWithSingleStringParamAndSingleIntParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityStrNameWithSingleStringParamAndSingleIntParamContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStr" ):
                return visitor.visitStrUtilityStr(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStr(self):

        localctx = DslParser.StrUtilityStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_strUtilityStr)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1787
                self.strUtilityStrNameWithoutParam()
                self.state = 1788
                self.match(DslParser.LeftBracket)
                self.state = 1789
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1791
                self.strUtilityStrNameWithSingleIntParam()
                self.state = 1792
                self.match(DslParser.LeftBracket)
                self.state = 1793
                self.allInt()
                self.state = 1794
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1796
                self.strUtilityStrNameWithDoubleIntParam()
                self.state = 1797
                self.match(DslParser.LeftBracket)
                self.state = 1798
                self.allInt()
                self.state = 1799
                self.match(DslParser.Comma)
                self.state = 1800
                self.allInt()
                self.state = 1801
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1803
                self.strUtilityStrNameWithSingleStringParam()
                self.state = 1804
                self.match(DslParser.LeftBracket)
                self.state = 1805
                self.strExpr()
                self.state = 1806
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1808
                self.strUtilityStrNameWithDoubleStringParam()
                self.state = 1809
                self.match(DslParser.LeftBracket)
                self.state = 1810
                self.strExpr()
                self.state = 1811
                self.match(DslParser.Comma)
                self.state = 1812
                self.strExpr()
                self.state = 1813
                self.match(DslParser.RightBracket)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1815
                self.strUtilityStrNameWithSingleStringParamAndSingleIntParam()
                self.state = 1816
                self.match(DslParser.LeftBracket)
                self.state = 1817
                self.strExpr()
                self.state = 1818
                self.match(DslParser.Comma)
                self.state = 1819
                self.allInt()
                self.state = 1820
                self.match(DslParser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithoutParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ToLowerCase(self):
            return self.getToken(DslParser.ToLowerCase, 0)

        def ToUpperCase(self):
            return self.getToken(DslParser.ToUpperCase, 0)

        def Capitalize(self):
            return self.getToken(DslParser.Capitalize, 0)

        def ShortName(self):
            return self.getToken(DslParser.ShortName, 0)

        def Trim(self):
            return self.getToken(DslParser.Trim, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithoutParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithoutParam" ):
                return visitor.visitStrUtilityStrNameWithoutParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithoutParam(self):

        localctx = DslParser.StrUtilityStrNameWithoutParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_strUtilityStrNameWithoutParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 437605627854848) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithSingleIntParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Substring(self):
            return self.getToken(DslParser.Substring, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithSingleIntParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithSingleIntParam" ):
                return visitor.visitStrUtilityStrNameWithSingleIntParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithSingleIntParam(self):

        localctx = DslParser.StrUtilityStrNameWithSingleIntParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_strUtilityStrNameWithSingleIntParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(DslParser.Substring)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithDoubleIntParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Substring(self):
            return self.getToken(DslParser.Substring, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithDoubleIntParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithDoubleIntParam" ):
                return visitor.visitStrUtilityStrNameWithDoubleIntParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithDoubleIntParam(self):

        localctx = DslParser.StrUtilityStrNameWithDoubleIntParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_strUtilityStrNameWithDoubleIntParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(DslParser.Substring)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithSingleStringParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trim(self):
            return self.getToken(DslParser.Trim, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithSingleStringParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithSingleStringParam" ):
                return visitor.visitStrUtilityStrNameWithSingleStringParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithSingleStringParam(self):

        localctx = DslParser.StrUtilityStrNameWithSingleStringParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_strUtilityStrNameWithSingleStringParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(DslParser.Trim)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithDoubleStringParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReplaceAll(self):
            return self.getToken(DslParser.ReplaceAll, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithDoubleStringParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithDoubleStringParam" ):
                return visitor.visitStrUtilityStrNameWithDoubleStringParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithDoubleStringParam(self):

        localctx = DslParser.StrUtilityStrNameWithDoubleStringParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_strUtilityStrNameWithDoubleStringParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(DslParser.ReplaceAll)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityStrNameWithSingleStringParamAndSingleIntParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SplitAndGet(self):
            return self.getToken(DslParser.SplitAndGet, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityStrNameWithSingleStringParamAndSingleIntParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityStrNameWithSingleStringParamAndSingleIntParam" ):
                return visitor.visitStrUtilityStrNameWithSingleStringParamAndSingleIntParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityStrNameWithSingleStringParamAndSingleIntParam(self):

        localctx = DslParser.StrUtilityStrNameWithSingleStringParamAndSingleIntParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_strUtilityStrNameWithSingleStringParamAndSingleIntParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(DslParser.SplitAndGet)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityIntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strUtilityIntNameWithoutParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityIntNameWithoutParamContext,0)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def strUtilityIntNameWithSingleStringParam(self):
            return self.getTypedRuleContext(DslParser.StrUtilityIntNameWithSingleStringParamContext,0)


        def strExpr(self):
            return self.getTypedRuleContext(DslParser.StrExprContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_strUtilityInt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityInt" ):
                return visitor.visitStrUtilityInt(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityInt(self):

        localctx = DslParser.StrUtilityIntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_strUtilityInt)
        try:
            self.state = 1845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.strUtilityIntNameWithoutParam()
                self.state = 1837
                self.match(DslParser.LeftBracket)
                self.state = 1838
                self.match(DslParser.RightBracket)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.strUtilityIntNameWithSingleStringParam()
                self.state = 1841
                self.match(DslParser.LeftBracket)
                self.state = 1842
                self.strExpr()
                self.state = 1843
                self.match(DslParser.RightBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityIntNameWithoutParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Len(self):
            return self.getToken(DslParser.Len, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityIntNameWithoutParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityIntNameWithoutParam" ):
                return visitor.visitStrUtilityIntNameWithoutParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityIntNameWithoutParam(self):

        localctx = DslParser.StrUtilityIntNameWithoutParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_strUtilityIntNameWithoutParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.match(DslParser.Len)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityIntNameWithSingleStringParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IndexOf(self):
            return self.getToken(DslParser.IndexOf, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityIntNameWithSingleStringParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityIntNameWithSingleStringParam" ):
                return visitor.visitStrUtilityIntNameWithSingleStringParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityIntNameWithSingleStringParam(self):

        localctx = DslParser.StrUtilityIntNameWithSingleStringParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_strUtilityIntNameWithSingleStringParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.match(DslParser.IndexOf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtilityBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strUtiltiyBoolNameWithoutParam(self):
            return self.getTypedRuleContext(DslParser.StrUtiltiyBoolNameWithoutParamContext,0)


        def LeftBracket(self):
            return self.getToken(DslParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(DslParser.RightBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtilityBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtilityBool" ):
                return visitor.visitStrUtilityBool(self)
            else:
                return visitor.visitChildren(self)




    def strUtilityBool(self):

        localctx = DslParser.StrUtilityBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_strUtilityBool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.strUtiltiyBoolNameWithoutParam()
            self.state = 1852
            self.match(DslParser.LeftBracket)
            self.state = 1853
            self.match(DslParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrUtiltiyBoolNameWithoutParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IsLowercase(self):
            return self.getToken(DslParser.IsLowercase, 0)

        def IsUppercase(self):
            return self.getToken(DslParser.IsUppercase, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strUtiltiyBoolNameWithoutParam

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrUtiltiyBoolNameWithoutParam" ):
                return visitor.visitStrUtiltiyBoolNameWithoutParam(self)
            else:
                return visitor.visitChildren(self)




    def strUtiltiyBoolNameWithoutParam(self):

        localctx = DslParser.StrUtiltiyBoolNameWithoutParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_strUtiltiyBoolNameWithoutParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            _la = self._input.LA(1)
            if not(_la==51 or _la==52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllIntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(DslParser.INT, 0)

        def Minus(self):
            return self.getToken(DslParser.Minus, 0)

        def getRuleIndex(self):
            return DslParser.RULE_allInt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllInt" ):
                return visitor.visitAllInt(self)
            else:
                return visitor.visitChildren(self)




    def allInt(self):

        localctx = DslParser.AllIntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_allInt)
        try:
            self.state = 1860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1857
                self.match(DslParser.INT)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1858
                self.match(DslParser.Minus)
                self.state = 1859
                self.match(DslParser.INT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Size(self):
            return self.getToken(DslParser.Size, 0)

        def getRuleIndex(self):
            return DslParser.RULE_size

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSize" ):
                return visitor.visitSize(self)
            else:
                return visitor.visitChildren(self)




    def size(self):

        localctx = DslParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.match(DslParser.Size)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftMidBracket(self):
            return self.getToken(DslParser.LeftMidBracket, 0)

        def INT(self):
            return self.getToken(DslParser.INT, 0)

        def RightMidBracket(self):
            return self.getToken(DslParser.RightMidBracket, 0)

        def getRuleIndex(self):
            return DslParser.RULE_index

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = DslParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(DslParser.LeftMidBracket)
            self.state = 1865
            self.match(DslParser.INT)
            self.state = 1866
            self.match(DslParser.RightMidBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Neq(self):
            return self.getToken(DslParser.Neq, 0)

        def getRuleIndex(self):
            return DslParser.RULE_boolOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOperator" ):
                return visitor.visitBoolOperator(self)
            else:
                return visitor.visitChildren(self)




    def boolOperator(self):

        localctx = DslParser.BoolOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_boolOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            _la = self._input.LA(1)
            if not(_la==22 or _la==23):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gt(self):
            return self.getToken(DslParser.Gt, 0)

        def Lt(self):
            return self.getToken(DslParser.Lt, 0)

        def Gte(self):
            return self.getToken(DslParser.Gte, 0)

        def Lte(self):
            return self.getToken(DslParser.Lte, 0)

        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Neq(self):
            return self.getToken(DslParser.Neq, 0)

        def getRuleIndex(self):
            return DslParser.RULE_numOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumOperator" ):
                return visitor.visitNumOperator(self)
            else:
                return visitor.visitChildren(self)




    def numOperator(self):

        localctx = DslParser.NumOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_numOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16515072) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gt(self):
            return self.getToken(DslParser.Gt, 0)

        def Lt(self):
            return self.getToken(DslParser.Lt, 0)

        def Gte(self):
            return self.getToken(DslParser.Gte, 0)

        def Lte(self):
            return self.getToken(DslParser.Lte, 0)

        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Neq(self):
            return self.getToken(DslParser.Neq, 0)

        def StartWith(self):
            return self.getToken(DslParser.StartWith, 0)

        def NotStartWith(self):
            return self.getToken(DslParser.NotStartWith, 0)

        def EndWith(self):
            return self.getToken(DslParser.EndWith, 0)

        def NotEndWith(self):
            return self.getToken(DslParser.NotEndWith, 0)

        def Contain(self):
            return self.getToken(DslParser.Contain, 0)

        def NotContain(self):
            return self.getToken(DslParser.NotContain, 0)

        def Match(self):
            return self.getToken(DslParser.Match, 0)

        def NotMatch(self):
            return self.getToken(DslParser.NotMatch, 0)

        def getRuleIndex(self):
            return DslParser.RULE_strOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrOperator" ):
                return visitor.visitStrOperator(self)
            else:
                return visitor.visitChildren(self)




    def strOperator(self):

        localctx = DslParser.StrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_strOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4294705152) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Contain(self):
            return self.getToken(DslParser.Contain, 0)

        def NotContain(self):
            return self.getToken(DslParser.NotContain, 0)

        def getRuleIndex(self):
            return DslParser.RULE_collectionOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionOperator" ):
                return visitor.visitCollectionOperator(self)
            else:
                return visitor.visitChildren(self)




    def collectionOperator(self):

        localctx = DslParser.CollectionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_collectionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HasOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Contain(self):
            return self.getToken(DslParser.Contain, 0)

        def NotContain(self):
            return self.getToken(DslParser.NotContain, 0)

        def In(self):
            return self.getToken(DslParser.In, 0)

        def NotIn(self):
            return self.getToken(DslParser.NotIn, 0)

        def getRuleIndex(self):
            return DslParser.RULE_hasOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHasOperator" ):
                return visitor.visitHasOperator(self)
            else:
                return visitor.visitChildren(self)




    def hasOperator(self):

        localctx = DslParser.HasOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_hasOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12935233536) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(DslParser.Eq, 0)

        def Neq(self):
            return self.getToken(DslParser.Neq, 0)

        def getRuleIndex(self):
            return DslParser.RULE_nullOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullOperator" ):
                return visitor.visitNullOperator(self)
            else:
                return visitor.visitChildren(self)




    def nullOperator(self):

        localctx = DslParser.NullOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_nullOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            _la = self._input.LA(1)
            if not(_la==22 or _la==23):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Is(self):
            return self.getToken(DslParser.Is, 0)

        def IsNot(self):
            return self.getToken(DslParser.IsNot, 0)

        def getRuleIndex(self):
            return DslParser.RULE_isOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOperator" ):
                return visitor.visitIsOperator(self)
            else:
                return visitor.visitChildren(self)




    def isOperator(self):

        localctx = DslParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            _la = self._input.LA(1)
            if not(_la==34 or _la==35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RootNodeAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Node(self):
            return self.getToken(DslParser.Node, 0)

        def NodeAttr(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.NodeAttr)
            else:
                return self.getToken(DslParser.NodeAttr, i)

        def Point(self, i:int=None):
            if i is None:
                return self.getTokens(DslParser.Point)
            else:
                return self.getToken(DslParser.Point, i)

        def collectionNodeAttr(self):
            return self.getTypedRuleContext(DslParser.CollectionNodeAttrContext,0)


        def As(self):
            return self.getToken(DslParser.As, 0)

        def alias(self):
            return self.getTypedRuleContext(DslParser.AliasContext,0)


        def getRuleIndex(self):
            return DslParser.RULE_rootNodeAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRootNodeAttr" ):
                return visitor.visitRootNodeAttr(self)
            else:
                return visitor.visitChildren(self)




    def rootNodeAttr(self):

        localctx = DslParser.RootNodeAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_rootNodeAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            _la = self._input.LA(1)
            if not(_la==117 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1883
                    self.match(DslParser.Point)
                    self.state = 1884
                    self.match(DslParser.NodeAttr) 
                self.state = 1889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

            self.state = 1892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.match(DslParser.Point)
                self.state = 1891
                self.collectionNodeAttr()


            self.state = 1897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 1894
                self.match(DslParser.As)
                self.state = 1895
                self.alias()
                pass
            elif token in [134]:
                self.state = 1896
                self.alias()
                pass
            elif token in [1, 2, 4, 7, 12, 79, 132, 133]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(DslParser.ALIAS, 0)

        def getRuleIndex(self):
            return DslParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = DslParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.match(DslParser.ALIAS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(DslParser.ALIAS, 0)

        def getRuleIndex(self):
            return DslParser.RULE_stepName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepName" ):
                return visitor.visitStepName(self)
            else:
                return visitor.visitChildren(self)




    def stepName(self):

        localctx = DslParser.StepNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_stepName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.match(DslParser.ALIAS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineComment(self):
            return self.getToken(DslParser.MultiLineComment, 0)

        def OneLineComment(self):
            return self.getToken(DslParser.OneLineComment, 0)

        def getRuleIndex(self):
            return DslParser.RULE_comment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = DslParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            _la = self._input.LA(1)
            if not(_la==132 or _la==133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PrevDfg(self):
            return self.getToken(DslParser.PrevDfg, 0)

        def NextDfg(self):
            return self.getToken(DslParser.NextDfg, 0)

        def PrevCfg(self):
            return self.getToken(DslParser.PrevCfg, 0)

        def NextCfg(self):
            return self.getToken(DslParser.NextCfg, 0)

        def getRuleIndex(self):
            return DslParser.RULE_direction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = DslParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PresenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Contain(self):
            return self.getToken(DslParser.Contain, 0)

        def NotContain(self):
            return self.getToken(DslParser.NotContain, 0)

        def getRuleIndex(self):
            return DslParser.RULE_presence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPresence" ):
                return visitor.visitPresence(self)
            else:
                return visitor.visitChildren(self)




    def presence(self):

        localctx = DslParser.PresenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_presence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1907
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





