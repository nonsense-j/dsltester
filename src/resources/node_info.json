{
    "annotation": "Represents a Java annotation, a form of metadata that can be added to Java source code. For example: `@TheAnnotation(isOk = false, num = 3, str = Test.test1)`.",
    "annoMember": "Represents a member or attribute within an annotation, specified as a key-value pair. For example, in `@TheAnnotation(isOk = false, num = 3)`, `isOk = false` and `num = 3` are annotation members.",
    "recordDeclaration": "Represents the declaration of a class or an interface. For example: `public class MyClass { }` or `public interface MyInterface { }`.",
    "anonymousInnerClassExpression": "Represents an anonymous inner class expression, which is a concise way to create a one-time-use class. For example: `new MemberClass() { @Override public void f() { ... } };`.",
    "arrayAccess": "Represents an expression that accesses an element of an array using its index. For example: `arr[3]` or `arr2[1][3]`.",
    "arrayCreationExpression": "Represents an expression that creates a new array with a specified size. For example: `new String[11]`.",
    "initArrayExpression": "Represents an array initializer, which provides the initial values for an array. For example: `{1, 2, 4}` or `{\"ok\", \"hello\", \"yes\"}`.",
    "functionDeclaration": "Represents the declaration of a method, including its modifiers, return type, name, parameters, and body. For example: `public void fun() { ... }`.",
    "paramDeclaration": "Represents the declaration of a parameter within a method's signature. For example, in `public void fun(String name)`, `String name` is the parameter declaration.",
    "functionCall": "Represents a method call or invocation. For example: `Objects.isNull(str)` or `person.getName()`.",
    "argument": "Represents the list of arguments passed to a method during a function call. For example, in `JSON.parseObject(\"text\", Demo.class)`, `(\"text\", Demo.class)` represents the arguments.",
    "methodReferenceExpression": "Represents a method reference expression, a shorthand for a lambda expression that only calls a single method. For example: `List::stream`.",
    "objectCreationExpression": "Represents an expression that creates a new object instance using the `new` keyword. For example: `new ArrayList()`.",
    "assignStatement": "Represents an assignment statement where a value is assigned to a variable. It is a type of binary operation. For example: `a = 10;`.",
    "binaryOperation": "Represents a binary operation involving two operands and an operator, such as arithmetic (`+`, `-`, `*`, `/`) or assignment (`=`). For example: `a + b` or `a = 10`.",
    "castExpression": "Represents a type cast expression, which explicitly converts a value from one data type to another. For example: `(Son) dad`.",
    "fieldDeclaration": "Represents the declaration of a field (a member variable) within a class. For example: `public static int count = 0;` or `private String name;`.",
    "fieldAccess": "Represents an expression that accesses a field (member variable) of an object or class. For example: `Person.name`.",
    "enumDeclaration": "Represents the declaration of an enumeration (enum) type. For example: `enum MyEnum { ... }`.",
    "enumConstantDeclaration": "Represents the declaration of a constant within an enum. For example: `MONDAY` or `MERCURY(3.303e+23, 2.4397e6)`.",
    "enumConstantAccess": "Represents an expression that accesses an enum constant. For example: `DayOfWeek.MONDAY`.",
    "exceptionBlock": "Represents an exception handling block, which consists of `try`, `catch`, and `finally` clauses to handle exceptions. For example: `try { ... } catch (Exception e) { ... } finally { ... }`.",
    "tryBlock": "Represents a `try` block, which contains code that might throw an exception. For example: `try { // code }`.",
    "catchBlock": "Represents a `catch` block, which catches and handles exceptions thrown from the corresponding `try` block. For example: `catch (Exception e) { // handler }`.",
    "finallyBlock": "Represents a `finally` block, which contains code that is always executed after the `try` and any `catch` blocks, regardless of whether an exception was thrown. For example: `finally { // cleanup code }`.",
    "tryWithResources": "Represents a `try-with-resources` statement, which ensures that each resource is closed at the end of the statement. For example: `try (Statement stmt = con.createStatement()) { ... }`.",
    "throwStatement": "Represents a `throw` statement, used to explicitly throw an exception. For example: `throw new Exception();`.",
    "forBlock": "Represents a traditional `for` loop block, which repeatedly executes a block of code as long as a condition is true. For example: `for (int i = 0; i < 10; i++) { ... }`.",
    "forEachBlock": "Represents an enhanced `for` loop (or `forEach`) block, used for iterating over elements in an array or a collection. For example: `for (Integer integer : list) { ... }`.",
    "whileBlock": "Represents a `while` loop block, which executes a block of code as long as its condition remains true. For example: `while (condition) { ... }`.",
    "doWhileBlock": "Represents a `do-while` loop block, which executes a block of code once, and then repeatedly as long as its condition remains true. For example: `do { ... } while (condition);`.",
    "loopBlock": "Represents any kind of loop statement block, including `for`, `forEach`, `while`, and `do-while` loops.",
    "ifBlock": "Represents an `if-else` conditional statement block, which executes different blocks of code based on a condition. For example: `if (condition) { ... } else { ... }`.",
    "thenBlock": "Represents the 'then' block of an `if` statement, which is executed when the condition is true. For example, in `if (num > 10) { do(); }`, `{ do(); }` is the then block.",
    "elseBlock": "Represents the `else` block of an `if-else` statement, which is executed when the condition is false. For example: `else { ... }`.",
    "importDeclaration": "Represents an `import` declaration, used to import classes or entire packages into the current file. For example: `import com.huawei.java.util.List;`.",
    "instanceofExpression": "Represents an `instanceof` expression, which checks if an object is an instance of a particular class or interface. For example: `father instanceof Father`.",
    "lambdaExpression": "Represents a lambda expression, an anonymous function that can be used to implement a method of a functional interface. For example: `integer -> System.out.println(integer)`.",
    "literal": "Represents a literal value, which is a fixed value in source code. This includes string, boolean, numeric, and null literals.",
    "stringLiteral": "Represents a string literal, a sequence of characters enclosed in double quotes. For example: `\"aaa\"`.",
    "boolLiteral": "Represents a boolean literal, which can be either `true` or `false`.",
    "numLiteral": "Represents a numeric literal, such as an integer (e.g., `10`), a floating-point number (e.g., `3.14`), or a long (e.g., `100L`).",
    "returnStatement": "Represents a `return` statement, used to exit from a method, with or without a value. For example: `return a;`.",
    "breakStatement": "Represents a `break` statement, used to terminate a loop (`for`, `while`, etc.) or a `switch` statement. For example: `break;`.",
    "continueStatement": "Represents a `continue` statement, which skips the current iteration of a loop and proceeds to the next one. For example: `continue;`.",
    "staticBlock": "Represents a static initializer block (`static { ... }`) or an instance initializer block (`{ ... }`). A static block is executed once when the class is loaded. For example: `static { // initialization code }`.",
    "switchBlock": "Represents a `switch` statement block, which allows a variable to be tested for equality against a list of values. For example: `switch (n) { case 1: ... default: ... }`.",
    "caseStatement": "Represents a `case` label within a `switch` block, defining a block of code to be executed if the switch expression matches the case value. For example: `case 12:`.",
    "defaultStatement": "Represents the `default` label within a `switch` block, specifying the code to run if no other `case` label matches. For example: `default:`.",
    "synchronizedBlock": "Represents a `synchronized` block, which prevents concurrent execution of that block of code by multiple threads on the same object. For example: `synchronized(lock) { ... }`.",
    "ternaryOperation": "Represents a ternary operation (also known as a conditional expression), which is a shorthand for an `if-else` statement. For example: `condition ? value_if_true : value_if_false`.",
    "unaryOperation": "Represents a unary operation involving a single operand, such as increment (`++`), decrement (`--`), or negation (`!`). For example: `a++` or `--b`.",
    "variableAccess": "Represents the access or use of a variable's value. For example, in `log.info(a)`, `a` is a variable access.",
    "variableDeclaration": "Represents the declaration of a local variable, optionally with an initial value. For example: `int a = 10;` or `String b;`.",
    "comment": "Represents a comment in the source code. This can be a single-line (`//`), multi-line (`/* ... */`), or Javadoc (`/** ... */`) comment.",
    "lineComment": "Represents a single-line comment, which starts with `//` and extends to the end of the line. For example: `// This is a comment`.",
    "blockComment": "Represents a multi-line or block comment, which starts with `/*` and ends with `*/`. For example: `/* This is a block comment */`.",
    "javadocComment": "Represents a Javadoc comment, which starts with `/**` and ends with `*/`. It is used for generating API documentation. For example: `/** Documentation for a method */`.",
    "type": "A general node representing the data type of a variable, field, parameter, or method return value. For example, in `List<R> values;`, the type is `List<R>`.",
    "arrayType": "Represents an array type. It is a specialization of the 'type' node. For example: `int[]` or `String[][]`.",
    "objectType": "Represents an object type, including classes, interfaces, enums, and generic types. It is a specialization of the 'type' node. For example: `Map<String, String>` or `Person`."
}