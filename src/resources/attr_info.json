{
    "annoMembers": "Retrieves a collection of members (key-value pairs) from an annotation. For example, for `@TheAnnotation(isOk = false)`, this attribute allows accessing the `isOk` member.",
    "annoValue": "Retrieves the specific value assigned to an annotation member. In `@TheAnnotation(isOk = false, str = Test.test1)`, the `annoValue` for the member `isOk` is the literal `false`, and for `str` it is the field access `Test.test1`.",
    "comments": "Retrieves a collection of comments associated with a code element (like a class, method, or field). Example: For `// This is a class \n public class MyClass {}`, this attribute on `MyClass` would return the line comment.",
    "kind": "Identifies the kind of a type declaration. The value is a string, such as 'class' or 'interface'. Example: For `public class MyClass {}`, the `kind` is 'class'.",
    "superTypes": "Retrieves all direct and indirect superclasses and implemented interfaces of a type. For example, if `class B extends A` and `A` implements `I`, the `superTypes` of `B` would include both `A` and `I`, and all of `A`'s supertypes.",
    "directSuperTypes": "Retrieves only the directly inherited superclass and implemented interfaces. For example, if `class B extends A implements I`, `directSuperTypes` for `B` are `A` and `I`, but not `A`'s own superclasses.",
    "definedFields": "Retrieves all fields defined directly within a class or enum. It does not include inherited fields. Example: For `class MyClass { int a; }`, `definedFields` would return the declaration for field `a`.",
    "definedConstructors": "Retrieves all constructors defined within a class. Example: For `class MyClass { public MyClass() {} }`, this attribute returns the defined constructor.",
    "definedMethods": "Retrieves all methods defined directly within a class or enum. It does not include inherited methods. Example: For `class MyClass { void doSomething() {} }`, `definedMethods` returns the `doSomething` method.",
    "anonymousClassBody": "Retrieves the body of an anonymous inner class, allowing inspection of the members (methods, fields) defined within it. Example: In `new Runnable() { @Override public void run() {} }`, this attribute provides access to the `run` method.",
    "arrayIndex": "Retrieves the expression used as the index in an array access operation. Example: In `myArray[3]`, `arrayIndex` is the literal `3`.",
    "base": "Refers to the object or expression on which an operation is performed. For a method call like `obj.doSomething()`, the `base` is `obj`. For a field access like `Person.name`, the `base` is `Person`. For an array access like `arr[0]`, the `base` is `arr`.",
    "rootBase": "In a chain of operations (e.g., `a().b().c()`), this attribute retrieves the very first element of the chain. For `a().b().c()`, the `rootBase` of the call to `c()` is the call `a()`.",
    "dimensions": "For an array creation, retrieves a collection of expressions that define the size of each dimension. Example: In `new String[10][20]`, `dimensions` is a collection containing the literals `10` and `20`.",
    "dimensions[]": "Accesses a specific dimension's size expression in an array creation by its zero-based index. Example: In `new String[10][20]`, `dimensions[0]` is `10` and `dimensions[1]` is `20`.",
    "initArray": "In an array creation with an initializer, this attribute retrieves the initializer expression. Example: In `new String[]{\"a\", \"b\"}`, `initArray` refers to the `{\"a\", \"b\"}` part.",
    "elements": "Retrieves the collection of elements within an array initializer. Example: For `{\"a\", \"b\", \"c\"}`, `elements` is a collection containing the string literals 'a', 'b', and 'c'.",
    "elements[]": "Accesses a specific element in an array initializer by its zero-based index. Example: In `{\"a\", \"b\"}`, `elements[0]` is the literal 'a'.",
    "isConstructor": "A boolean attribute for a function declaration that is `true` if the function is a constructor, and `false` otherwise. Example: For `public MyClass() {}`, `isConstructor` is true.",
    "hasBody": "A boolean attribute for a method declaration that is `true` if the method has a body (i.e., it is not abstract or in an interface). Example: For `public void run() {}`, `hasBody` is true.",
    "functionUsages": "Retrieves all the locations (as functionCall nodes) where a specific function is called. This is the inverse of the `function` attribute on a `functionCall`.",
    "callers": "Retrieves the method declarations that contain calls to this function. For example, if `methodA()` calls `methodB()`, then `methodA` is a caller of `methodB`.",
    "assignStatements": "Within a method body, retrieves a collection of all assignment statements. Example: For `void test() { int a = 1; b = 2; }`, this returns the statements `a = 1` and `b = 2`.",
    "fieldAccesses": "Within a method body, retrieves a collection of all field access expressions. Example: For `void test() { System.out.println(this.name); }`, this returns the access to `this.name`.",
    "functionCalls": "Within a method body, retrieves a collection of all function call expressions. Example: For `void test() { doSomething(); }`, this returns the call to `doSomething()`.",
    "ifBlocks": "Within a method body, retrieves a collection of all `if` statements.",
    "loopBlocks": "Within a method body, retrieves a collection of all loop statements (e.g., `for`, `while`, `do-while`).",
    "parameters": "Retrieves the list of parameter declarations for a method, lambda, or catch block. Example: For `void myMethod(String name, int age)`, this returns the declarations for `name` and `age`.",
    "returnStatements": "Within a method body, retrieves a collection of all `return` statements.",
    "variableAccesses": "Within a method body, retrieves a collection of all variable access expressions. Example: For `void test(int x) { int y = x; }`, this would return the access to `x`.",
    "subMethods": "For a method in a superclass, retrieves a collection of all methods that override it in subclasses.",
    "superMethods": "For a method that overrides another, retrieves the method from the superclass that it overrides.",
    "function": "For a function call or method reference, this attribute resolves to the actual declaration of the function/method being called. Example: For a call `myObject.doWork()`, `function` points to the `functionDeclaration` of `doWork`.",
    "possibleFunctions": "For a method call on a polymorphic object, this retrieves all possible methods that could be executed at runtime. It includes the method from the declared type as well as any overriding methods from potential subclass types. Example: If `Shape s = new Circle();` and `s.draw()` is called, `possibleFunctions` would include both `Shape.draw()` and `Circle.draw()`.",
    "arguments": "Retrieves the collection of arguments passed in a function call or object creation. Example: In `myFunction(a, 10)`, `arguments` is a collection containing the variable `a` and the literal `10`.",
    "arguments[n]": "Accesses the n-th argument (zero-based) in a function call. Example: In `myFunction(\"hello\", 10)`, `arguments[0]` is the string literal 'hello'.",
    "argumentIndex": "For an argument in a function call, retrieves its zero-based index in the argument list. Example: In `myFunction(a, b)`, the `argumentIndex` for `a` is 0 and for `b` is 1.",
    "argumentHolder": "For an argument, this retrieves the function call that it belongs to. Example: For the argument `\"hello\"` in `println(\"hello\")`, `argumentHolder` is the `println` function call.",
    "lhs": "Stands for 'left-hand side'. In an assignment (`a = 5`) or a binary operation (`x > y`), it refers to the left operand (`a` or `x`).",
    "rhs": "Stands for 'right-hand side'. In an assignment (`a = 5`) or a binary operation (`x > y`), it refers to the right operand (`5` or `y`).",
    "operator": "Retrieves the operator used in a binary (e.g., `==`, `+`, `>`) or unary (e.g., `++`, `!`) expression as a string.",
    "operands": "Retrieves a collection of all operands in a binary expression. Example: For `a > b`, `operands` contains `a` and `b`.",
    "castType": "In a type cast expression, this retrieves the type to which the operand is being cast. Example: In `(String) obj`, `castType` is `String`.",
    "operand": "Refers to the expression being operated on. For a cast `(String) obj`, the `operand` is `obj`. For a unary operation `i++`, the `operand` is `i`. For a throw statement `throw e;`, the `operand` is `e`.",
    "initializer": "Retrieves the initializer expression for a variable or field declaration. Example: In `int x = 10;`, the `initializer` for `x` is the literal `10`.",
    "valueUsages": "For a variable or field declaration, retrieves all the locations where its value is read or used. This helps track the flow of data from a declaration.",
    "field": "For a field access expression (e.g., `this.name`), this attribute resolves to the original declaration of that field (`fieldDeclaration`).",
    "enumConstants": "For an enum declaration, retrieves a collection of all the defined enum constants. Example: For `enum Color { RED, GREEN, BLUE }`, this returns `RED`, `GREEN`, and `BLUE`.",
    "definedEnumConstantFields": "Retrieves fields defined within the body of a specific enum constant. Example: `enum MyEnum { CONSTANT { private int x = 5; } }`.",
    "definedEnumConstantMethods": "Retrieves methods defined within the body of a specific enum constant. Example: `enum MyEnum { CONSTANT { void work() {} } }`.",
    "enumConstantArguments": "Retrieves the arguments passed to the constructor of an enum constant. Example: In `enum Planet { MERCURY(3.3e+23, 2.4e6) }`, this attribute returns the two numeric literals.",
    "enumConstant": "For an enum constant access (e.g., `Planet.EARTH`), this attribute resolves to the original declaration of that constant (`enumConstantDeclaration`).",
    "tryBlock": "In a `try-catch-finally` structure, this retrieves the main `try` block.",
    "catchBlocks": "In a `try-catch-finally` structure, this retrieves a collection of all the associated `catch` blocks.",
    "finallyBlock": "In a `try-catch-finally` structure, this retrieves the associated `finally` block, if it exists.",
    "resources": "In a `try-with-resources` statement, this retrieves the collection of resource declarations. Example: In `try (Reader r = new FileReader(...))`, this returns the declaration for `r`.",
    "initialization": "In a standard `for` loop, retrieves the initialization part. Example: In `for (int i = 0; i < 10; i++)`, `initialization` refers to `int i = 0`.",
    "iteration": "In a standard `for` loop, retrieves the update/iteration part. Example: In `for (int i = 0; i < 10; i++)`, `iteration` refers to `i++`.",
    "variable": "In a `for-each` loop, this refers to the loop variable declaration, e.g., `String s` in `for (String s : myList)`. It also refers to the original declaration for any variable access.",
    "iterable": "In a `for-each` loop, this refers to the collection or iterable being looped over. Example: In `for (String s : myList)`, `iterable` is `myList`.",
    "thenBlock": "In an `if-else` statement, this retrieves the block of code that executes when the condition is true.",
    "elseBlock": "In an `if-else` statement, this retrieves the `else` block, which executes when the condition is false.",
    "isStatic": "A boolean attribute for an import declaration that is `true` if it is a static import. Example: `true` for `import static java.lang.Math.PI;`.",
    "value": "Retrieves the raw value of a literal. For a string literal `\"hello\"`, the value is 'hello'. For a numeric literal `123`, the value is 123. For a boolean literal `true`, the value is `true`.",
    "length": "For a string literal, retrieves the number of characters in its value. Example: For `\"hello\"`, the `length` is 5.",
    "returnValue": "In a `return` statement, this retrieves the expression being returned. Example: In `return x * 2;`, `returnValue` is the expression `x * 2`.",
    "selector": "In a `switch` statement, this retrieves the expression whose value is being tested. Example: In `switch (dayOfWeek)`, `selector` is `dayOfWeek`.",
    "lock": "In a `synchronized` block, this retrieves the object being used as the lock. Example: In `synchronized (myLock) { ... }`, `lock` refers to `myLock`.",
    "thenExpression": "In a ternary operation (`condition ? expr1 : expr2`), this refers to the expression that is evaluated if the condition is true (`expr1`).",
    "elseExpression": "In a ternary operation (`condition ? expr1 : expr2`), this refers to the expression that is evaluated if the condition is false (`expr2`).",
    "isPrefix": "For a unary operation, a boolean that is `true` if the operator comes before the operand (e.g., `++i`) and `false` if it comes after (e.g., `i++`).",
    "content": "Retrieves the text content of a comment as a string. Example: For `// Hello World`, `content` is ' Hello World'.",
    "commentedNode": "For a comment, this retrieves the code element (node) that the comment is attached to. Example: For `// Method description \\n void myMethod()`, this would refer to the `myMethod` declaration.",
    "definition": "For a type node (e.g., a variable's type), retrieves the full declaration of that type. Example: For a variable `Person p;`, `p.type.definition` would point to the `class Person { ... }` declaration.",
    "dimension": "For an array type, retrieves its dimension count as a number. Example: For `int[][]`, the `dimension` is 2.",
    "baseType": "For an array type, retrieves the underlying element type. Example: For `String[][]`, the `baseType` is `String`.",
    "isBounded": "For a generic type parameter, returns `true` if it has a bound (e.g., `? extends List`, `T super Number`).",
    "boundedOperator": "For a bounded generic type, returns the keyword used for the bound as a string, either 'extends' or 'super'.",
    "genericBoundedType": "For a bounded generic type, retrieves the type that serves as the bound. Example: For `? extends List`, `genericBoundedType` is the type `List`.",
    "generics": "Retrieves the immediate generic type arguments of a parameterized type. Example: For `Map<String, Integer>`, `generics` is a collection containing the types `String` and `Integer`.",
    "allGenerics": "Retrieves all generic type arguments, including nested ones. Example: For `Map<String, List<Integer>>`, `allGenerics` would be a collection of `String`, `List<Integer>`, and `Integer`.",
    "terminalGenerics": "Retrieves only the innermost, non-parameterized generic types. Example: For `Map<String, List<Integer>>`, `terminalGenerics` would be `String` and `Integer`."
}